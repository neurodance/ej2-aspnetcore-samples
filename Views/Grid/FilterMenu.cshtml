@{
    ViewData["Title"] = "FilterMenu";
}

<h2>FilterMenu</h2>

@section ControlsSection{
    <div class="col-lg-8 control-section">
        <div class="control-wrapper">
            <div class="control-section">
                <ejs-grid id="Grid" allowFiltering="true" allowSorting="true" allowPaging="true" load="load">
                    <e-grid-filterSettings type="Menu"></e-grid-filterSettings>
                    <e-grid-pagesettings pageCount="5"></e-grid-pagesettings>
                    <e-grid-columns>
                        <e-grid-column field="EmployeeID" headerText="Employee ID" isPrimaryKey="true" textAlign="Right" width="120"></e-grid-column>
                        <e-grid-column field="Employees" headerText="Employee Name" width="150"></e-grid-column>
                        <e-grid-column field="Designation" headerText="Designation" width="130"></e-grid-column>
                        <e-grid-column field="CurrentSalary" headerText="CurrentSalary" format="C2" width="120"></e-grid-column>
                    </e-grid-columns>

                </ejs-grid>
            </div>
            </div>
        </div>
        <template>
            <tr class="infinite-row">
            <td class="left-side"><div style='padding-left: 0px;'>Enable OnDemand: </div></td>
                <td><input type="checkbox" tabindex="1" id='dataloadtype' /></td>
            </tr>
        </template>
<div class="col-lg-4 property-section">

   

    <table id="property" title="Properties" style="width: 100%;">


        <tr>
            <td class="left-side">Filter Type :</td>
            <td>
                <ejs-dropdownlist id="filtertype" dataSource="@ViewBag.filtertype" value="@("Menu")" change="onChange" index="2" popupHeight="220px"></ejs-dropdownlist>
            </td>
        </tr>
    </table>
</div>

<script>
        function onChange() {
            var gridObj = document.getElementById("Grid").ej2_instances[0], dropdpwnObj = document.getElementById("filtertype").ej2_instances[0];
            gridObj.filterSettings.type = dropdpwnObj.value;
            var propertyTbody = document.querySelector('#property tbody');
            var enableInfiniteLoad;
            if (dropdpwnObj.value === 'Excel' || dropdpwnObj.value === 'CheckBox') {
                if (propertyTbody.children.length < 2) {
                    var temp = document.getElementsByTagName("template")[0];
                    var cloneTemplate = temp.content.cloneNode(true);
                    propertyTbody.appendChild(cloneTemplate.querySelector("tr.infinite-row"));
                    enableInfiniteLoad = new ej.buttons.CheckBox({
                        change: function(e) {
                            gridObj.filterSettings.enableInfiniteScrolling = e.checked;
                        }
                    });
                    enableInfiniteLoad.appendTo('#dataloadtype');
                } else {
                    enableInfiniteLoad = document.getElementById('dataloadtype').ej2_instances[0];
                    enableInfiniteLoad.checked = false;
                    gridObj.filterSettings.enableInfiniteScrolling = false;
                }
            } else {
                gridObj.filterSettings.enableInfiniteScrolling = false;
                ej.base.remove(document.querySelector('#property tbody tr.infinite-row'));
            }
        }
        function load(args) {
            var hostUrl = 'https://ej2services.syncfusion.com/aspnet/release/';
            var urlapi = new ej.data.DataManager({
                url: hostUrl + "api/UrlDataSource",
                adaptor: new ej.data.UrlAdaptor()
            });
            this.dataSource = urlapi;
            this.query = new ej.data.Query().addParams('dataCount', '10000');
        }
</script>
}
@section ActionDescription{
	<div id="action-description">
		 <p>
			This sample demonstrates the grid's multiple-type filter functionality and user interface.
		</p>
	</div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Filter Menu in ASP.NET Core Data Grid control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
		  <p>The filtering feature enables the user to view a reduced number of records based on the filter criteria. It can be enabled by setting the <code>allowFiltering</code> property to true.</p>
			<p>The grid supports the following filter types:</p>
			<ul>
				<li><code>Filterbar</code></li>
				<li><code>Menu</code></li>
				<li><code>Checkbox</code></li>
				<li><code>Excel</code></li>
			</ul>
			You can change the filter type by setting <code>filterSettings->type</code>.
            <p>In this demo, the filter menu is enabled by default. You can switch to other filter types using the dropdown.</p>
            <p>Additionally, we have an on-demand data fetch functionality and UI for the checkbox/Excel filter type. It can be enabled by setting the <code><a target="_blank" class="code"
	        href="">filterSettings->enableInfiniteScrolling</a></code> property to true. In this demo, on-demand data fetch is not enabled by default. To enable the on-demand data fetch for the checkbox/Excel filter type, the Enable OnDemand option must be checked after selecting the checkBox/Excel filter type using the dropdown menu.</p>
	    <p>
	        More information on the filter configuration can be found in this
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Grids.GridFilterSettings.html">
	            documentation section</a>.
	    </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core Data Grid Filter Menu Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Filter Menu in ASP.NET Core Data Grid Control</h1>
                }
