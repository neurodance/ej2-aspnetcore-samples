@{
    ViewData["Title"] = "Adaptive Layout";
}

<link href="~/grid/adaptive-layout.css" rel="stylesheet" />

@section ControlsSection{
    <div class="col-lg-8 control-section">
        <div class="control-wrapper e-bigger e-adaptive-demo">
            <div class="e-mobile-layout">
                <div class="e-mobile-content">
                    <ejs-grid id="adaptivebrowser" dataSource="ViewBag.dataSource" allowGrouping="false" allowExcelExport="true" allowPdfExport="true" toolbarClick="toolbarClick" enableAdaptiveUI="true" rowRenderingMode="Vertical" height="100%" allowPaging="true" allowFiltering="true" allowSorting="true" toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel", "Search", "ColumnChooser", "ExcelExport", "PdfExport" })" load="onLoad" showColumnMenu="true" showColumnChooser="true">
                        <e-grid-groupSettings showGroupedColumn="true"></e-grid-groupSettings>
                        <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                        <e-grid-filterSettings type="Excel"></e-grid-filterSettings>
                        <e-grid-pagesettings pageCount="3" pageSizes=true></e-grid-pagesettings>
                        <e-grid-aggregates>
                            <e-grid-aggregate>
                                <e-aggregate-columns>
                                    <e-aggregate-column field="Freight" type="Sum" format="C2" footerTemplate="Sum:${Sum}"></e-aggregate-column>
                                </e-aggregate-columns>
                            </e-grid-aggregate>
                        </e-grid-aggregates>
                        <e-grid-columns>
                            <e-grid-column field="OrderID" headerText="Order ID" width="180" isPrimaryKey="true" validationRules="@(new { required=true, number=true})"></e-grid-column>
                            <e-grid-column field="Freight" headerText="Freight" format="C2" width="200"  editType="numericedit" validationRules="@(new { required=true})"></e-grid-column>
                            <e-grid-column field="CustomerID" headerText="Customer ID" width="180" validationRules="@(new { required=true})"></e-grid-column>
                            <e-grid-column field="ShipCity" headerText="Ship City" width="180"></e-grid-column>
                        </e-grid-columns>
                    </ejs-grid>
                </div>
            </div>
            <div class="e-desktop-layout">
                <ejs-grid id="adaptivedevice" dataSource="ViewBag.dataSource" allowGrouping="false" allowExcelExport="true" allowPdfExport="true" toolbarClick="toolbarClick" enableAdaptiveUI="true" rowRenderingMode="Vertical" height="100%" allowPaging="true" allowFiltering="true" allowSorting="true" toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel", "Search", "ColumnChooser", "ExcelExport", "PdfExport" })" load="onLoad" showColumnMenu="true" showColumnChooser="true">
                <e-grid-groupSettings showGroupedColumn="true"></e-grid-groupSettings>    
                <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                    <e-grid-filterSettings type="Excel"></e-grid-filterSettings>
                    <e-grid-pagesettings pageCount="3" pageSizes=true></e-grid-pagesettings>
                    <e-grid-aggregates>
                        <e-grid-aggregate>
                            <e-aggregate-columns>
                                <e-aggregate-column field="Freight" type="Sum" format="C2" footerTemplate="Sum:${Sum}"></e-aggregate-column>
                            </e-aggregate-columns>
                        </e-grid-aggregate>
                    </e-grid-aggregates>
                    <e-grid-columns>
                        <e-grid-column field="OrderID" headerText="Order ID" width="180" isPrimaryKey="true" validationRules="@(new { required=true, number=true})"></e-grid-column>
                        <e-grid-column field="Freight" headerText="Freight" format="C2" width="200"  editType="numericedit" validationRules="@(new { required=true})"></e-grid-column>
                        <e-grid-column field="CustomerID" headerText="Customer ID" width="180" validationRules="@(new { required=true})"></e-grid-column>
                        <e-grid-column field="ShipCity" headerText="Ship City" width="180"></e-grid-column>
                    </e-grid-columns>
                </ejs-grid>
            </div>
        </div>
    </div>

    <div class="col-lg-4 property-section">
        <table id="property" title="Properties" style="width: 100%;">
            <tr>
                <td>
                    <div style="padding-left: 0px">Enable horizontal order</div>
                </td>
                <td>
                    <div>
                        <ejs-checkbox id="check" change="onChange"></ejs-checkbox>
                    </div>
                </td>
            </tr>
        </table>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            if (ej.base.Browser.isDevice) {
                document.getElementsByClassName('e-mobile-layout')[0].style.display = 'none';
            } else {
                document.getElementsByClassName('e-desktop-layout')[0].style.display = 'none';
            }
        });
        function onChange(e) {
            var grid;
            if (ej.base.Browser.isDevice && document.getElementById("adaptivedevice").classList.contains('e-grid')) {
                grid = document.getElementById("adaptivedevice").ej2_instances[0];
            } else {
                grid = document.getElementById("adaptivebrowser").ej2_instances[0];
            }
            grid.rowRenderingMode = e.checked ? 'Horizontal' : 'Vertical';
            grid.allowGrouping = e.checked;
        }

        function onLoad() {
            var grid;
            if (ej.base.Browser.isDevice && document.getElementById("adaptivedevice").classList.contains('e-grid')) {
                grid = document.getElementById("adaptivedevice").ej2_instances[0];
            } else {
                grid = document.getElementById("adaptivebrowser").ej2_instances[0];
            }
            if (!ej.base.Browser.isDevice) {
                grid.adaptiveDlgTarget = document.getElementsByClassName('e-mobile-content')[0];
            }
            if (grid.pageSettings.pageSizes) {
                document.querySelector('.e-adaptive-demo').classList.add('e-pager-pagesizes');
            }else {
                document.querySelector('.e-adaptive-demo').classList.remove('e-pager-pagesizes');
            }
        }

        function toolbarClick(args) {
            var gridObj;
            if (ej.base.Browser.isDevice && document.getElementById("adaptivedevice") && document.getElementById("adaptivedevice").classList.contains('e-grid')) {
                gridObj = document.getElementById("adaptivedevice").ej2_instances[0];
            } else {
                gridObj = document.getElementById("adaptivebrowser").ej2_instances[0];
            }
            if (args.item.id === gridObj.element.id + '_pdfexport') {
                gridObj.pdfExport();
            } else if (args.item.id === gridObj.element.id + '_excelexport') {
                gridObj.excelExport();
            }
        }
    </script>

    <style>
        /* The device with borders */
        .e-mobile-layout {
            position: relative;
            width: 360px;
            height: 640px;
            margin: auto;
            border: 16px #f4f4f4 solid;
            border-top-width: 60px;
            border-bottom-width: 60px;
            border-radius: 36px;
            box-shadow: 0 0px 2px rgb(144 144 144), 0 0px 10px rgb(0 0 0 / 16%);
        }
        
        .tailwind-dark .e-mobile-layout,
        .material-dark .e-mobile-layout,
        .fabric-dark .e-mobile-layout,
        .bootstrap-dark .e-mobile-layout,
        .bootstrap5-dark .e-mobile-layout {
            border: 16px rgb(255 255 255 / 10%) solid;
            border-top-width: 60px;
            border-bottom-width: 60px;
        }

            /* The horizontal line on the top of the device */
            .e-mobile-layout:before {
                content: '';
                display: block;
                width: 60px;
                height: 5px;
                position: absolute;
                top: -30px;
                left: 50%;
                transform: translate(-50%, -50%);
                background: #ebebeb;
                border-radius: 10px;
            }
            
        .tailwind-dark .e-mobile-layout::before,
        .tailwind-dark .e-mobile-layout::after,
        .material-dark .e-mobile-layout::before,
        .material-dark .e-mobile-layout::after,
        .fabric-dark .e-mobile-layout::before,
        .fabric-dark .e-mobile-layout::after,
        .bootstrap-dark .e-mobile-layout::before,
        .bootstrap-dark .e-mobile-layout::after,
        .bootstrap5-dark .e-mobile-layout::before,
        .bootstrap5-dark .e-mobile-layout::after {
            background: rgb(255 255 255 / 20%);
        }

            /* The circle on the bottom of the device */
            .e-mobile-layout:after {
                content: '';
                display: block;
                width: 35px;
                height: 35px;
                position: absolute;
                left: 50%;
                bottom: -65px;
                transform: translate(-50%, -50%);
                background: #e8e8e8;
                border-radius: 50%;
            }

            /* The screen (or content) of the device */
            .e-mobile-layout .e-mobile-content {
                overflow: hidden;
                width: 328px;
                height: 100%;
                background: transparent;
                border: 0px solid #dddddd;
            }

            .highcontrast .e-mobile-layout {
                border: 16px #000000 solid;
                border-top-width: 60px;
                border-bottom-width: 60px;
                box-shadow: -1px 2px white, -2px -2px white, 2px -2px white, 2px 1px white;
            }
    </style>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates optimal viewing experience and improve usability on small screens.
        </p>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Adaptive in ASP.NET Core Data Grid control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
        <p>
            The <code>enableAdaptiveUI</code> property is used to render the grid filter, sort, edit, pager and toolbars like column chooser, pdf export, excel export, etc... dialogs adaptively and
            <code>
                rowRenderingMode
            </code>
            property is used to render the grid row elements in the following directions,
        </p>
        <ul>
            <li><code>Horizontal</code> - Renders the grid row elements in the horizontal direction.</li>
            <li><code>Vertical</code> - Renders the grid row elements in the vertical direction.</li>
        </ul>
        <p>
            In this sample, you can change the row elements rendering direction by using the properties panel checkbox
        </p>
        <p> In this demo, the column menu feature is only supported for the Grid <code>rowRenderingMode</code> mode as <code>Vertical</code>.
            This feature includes grouping, sorting, autofit, filter, and column chooser feature.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core Data Grid Adaptive Layout Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Adaptive Layout in ASP.NET Core Data Grid Control</h1>
                }
