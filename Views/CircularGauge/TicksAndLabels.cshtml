@using Syncfusion.EJ2;
@section Meta{
    <meta name="description" content="This example demonstrates the Ticks and Labels in ASP.NET Core CircularGauge control. Explore here for more details." />
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates how to customize the ticks and labels on an axis. The position, offset, and height of the ticks and labels can be changed.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render and configure the ticks and labels of an axis in the circular gauge. Labels are
            units that are used to display the values on the axis. Labels can be customized using <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.CircularGauge.CircularGaugeLabel.html">e-axis-labelstyle</a>.
            Ticks are used to represent values on the axis. Ticks can be customized using
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.CircularGauge.CircularGaugeTick.html">e-axis-majorticks</a> and
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.CircularGauge.CircularGaugeTick.html">e-axis-minorticks</a>.
        </p>
        <p>
            More information on the ticks and labels can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/circular-gauge/gauge-axes">documentation section</a>.
        </p>
    </div>
}
@section ControlsSection{
    @{
        var labelFont = new Syncfusion.EJ2.CircularGauge.CircularGaugeFont { FontFamily = "inherit", Size = "10px" };
        var tickList = new List<CircularGaugeList>
        {
            new CircularGaugeList { Id = "MajorTicks", Name = "Major Ticks" },
            new CircularGaugeList { Id = "MinorTicks", Name = "Minor Ticks" },
        };
        var tickPositionList = new List<CircularGaugeList>
        {
            new CircularGaugeList { Id = "Inside", Name = "Inside" },
            new CircularGaugeList { Id = "Cross", Name = "Cross" },
            new CircularGaugeList { Id = "Outside", Name = "Outside" },
        };
        var labelPositionList = new List<CircularGaugeList>
        {
            new CircularGaugeList { Id = "Outside", Name = "Outside" },
            new CircularGaugeList { Id = "Cross", Name = "Cross" },
            new CircularGaugeList { Id = "Inside", Name = "Inside" },
        };
    }
    <div class="col-md-8 control-section">
        <ejs-circulargauge id="circular" background="transparent" load="gaugeLoad">
            <e-circulargauge-axes>
                <e-circulargauge-axis startAngle="210" endAngle="150" minimum="0" maximum="170" radius="80%">
                    <e-axis-linestyle width="2" color="#9E9E9E"></e-axis-linestyle>
                    <e-circulargauge-pointers>
                        <e-circulargauge-pointer value="145" type=RangeBar radius="60%" color="#8BC34A" pointerWidth=7 roundedCornerRadius="10">
                            <e-pointer-animation enable="false"></e-pointer-animation>
                        </e-circulargauge-pointer>
                    </e-circulargauge-pointers>
                    <e-axis-labelstyle position="@Syncfusion.EJ2.CircularGauge.Position.Outside" autoAngle="true" font="labelFont"></e-axis-labelstyle>
                    <e-axis-majorticks position="@Syncfusion.EJ2.CircularGauge.Position.Inside" color="#757575" width="2" height="10" interval="20"></e-axis-majorticks>
                    <e-axis-minorticks position="@Syncfusion.EJ2.CircularGauge.Position.Inside" color="#757575" width="2" height="5" interval="10"></e-axis-minorticks>
                    <e-circulargauge-annotations>
                        <e-circulargauge-annotation content="<div id='content' style='color:#518C03;font-size:20px;font-family:Segoe UI;font-weight:semibold;'>145</div>" angle="0" zIndex="1" radius="0%"></e-circulargauge-annotation>
                    </e-circulargauge-annotations>
                </e-circulargauge-axis>
            </e-circulargauge-axes>
        </ejs-circulargauge>
    </div>

    <div class="col-md-4 property-section">
        <div class="property-panel-section">
            <div class="property-panel-header">Properties</div>
            <div class="property-panel-content">
                <table title="Properties" style="width: 100%;">
                    <colgroup>
                        <col span="1" style="width: 47%;">
                        <col span="1" style="width: 40%;">
                        <col span="1" style="width: 10%;">
                    </colgroup>
                    <tr style="height: 50px">
                        <td>
                            <div style="font-size:14px; margin-top: -6px"> Ticks </div>
                        </td>
                        <td>
                            <div style="margin-top: -5px;height : 30px">
                                <ejs-dropdownlist id="Ticks" index=0 width="120%" dataSource="@tickList" change="valueChange">
                                    <e-dropdownlist-fields text="Name" value="Id"></e-dropdownlist-fields>
                                </ejs-dropdownlist>
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div style="font-size:14px; margin-top: -5px"> Tick Position </div>
                        </td>
                        <td>
                            <div style="margin-top: -5px;height : 30px">
                                <ejs-dropdownlist id="TickPosition" index=0 width="120%" dataSource="@tickPositionList" change="tickPositionValueChange">
                                    <e-dropdownlist-fields text="Name" value="Id"></e-dropdownlist-fields>
                                </ejs-dropdownlist>
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div style="font-size:14px; margin-top: -5px"> Label Position </div>
                        </td>
                        <td>
                            <div style="margin-top: -5px;height : 30px">
                                <ejs-dropdownlist id="LabelPosition" index=0 width="120%" dataSource="@labelPositionList" change="labelPositionValueChange">
                                    <e-dropdownlist-fields text="Name" value="Id"></e-dropdownlist-fields>
                                </ejs-dropdownlist>
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div style="font-size:14px">Tick Offset </div>
                        </td>
                        <td>
                            <div>
                                <input type="range" id="tickOffset" value="0" min="0" max="50">
                            </div>
                        </td>
                        <td style="text-align:center;">
                            <div>
                                <span id='offset' style="margin-left:-15px">0</span>
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div style="font-size:14px">Tick Height </div>
                        </td>
                        <td>
                            <div>
                                <input type="range" id="tickHeight" value="10" min="1" max="50">
                            </div>
                        </td>
                        <td style="text-align:center;">
                            <div>
                                <span id='height' style="margin-left:-15px">10</span>
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div style="font-size:14px">Label Offset </div>
                        </td>
                        <td>
                            <div>
                                <input type="range" id="labelOffset" value="0" min="0" max="50">
                            </div>
                        </td>
                        <td style="text-align:center;">
                            <div>
                                <span id='labelOffsetValue' style="margin-left:-15px">0</span>
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div id="enablePointer" style="font-size:14px; margin-top: -2px">Show Last Label </div>
                        </td>
                        <td>
                            <div style="margin-top: -4px">
                                <ejs-checkbox id="enable" checked="false" change="onChange"></ejs-checkbox>
                            </div>
                        </td>
                    </tr>

                </table>
            </div>
        </div>
    </div>
    <!-- custom code start -->
    <style>
        .control-section {
            min-height: 450px;
        }
        td {
            width: 40%;
        }
        input.e-input.e-bigger, textarea.e-input.e-bigger, .e-bigger input.e-input, .e-bigger textarea.e-input, .e-input-group.e-bigger, .e-bigger .e-input-group, .e-input-group.e-control-wrapper.e-bigger, .e-bigger .e-input-group.e-control-wrapper {
            height: 100%;
            font-size: 14px;
            align-items: center;
        }
    </style>
    <!-- custom code end -->
}
<script>
    window.gaugeLoad = function (args) {
    @* custom code start *@
        var theme = themeName ? themeName : 'Material';
        args.gauge.theme = (theme.charAt(0).toUpperCase() +
            theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');
    @* custom code end *@
        circulargauge = args.gauge;
    }
    var isMajorTicks = true, circulargauge;

    function valueChange() {
        var ticks = document.getElementById('Ticks').ej2_instances[0];
        var tickPosition = document.getElementById('TickPosition').ej2_instances[0];
        var tick;
        isMajorTicks = ticks.value.toString() === 'MajorTicks';
        if (isMajorTicks) {
            tick = circulargauge.axes[0].majorTicks;
        }
        else {
            tick = circulargauge.axes[0].minorTicks;
        }
        tickPosition.value = tick.position;
        document.getElementById('tickOffset').value = tick.offset.toString();
        document.getElementById('tickHeight').value = tick.height.toString();
        document.getElementById('offset').innerHTML = tick.offset;
        document.getElementById('height').innerHTML = tick.height;
    }
    
    function tickPositionValueChange() {
        var tickPosition = document.getElementById('TickPosition').ej2_instances[0];
        var value = tickPosition.value.toString();
        if (isMajorTicks) {
            circulargauge.axes[0].majorTicks.position = value;
        }
        else {
            circulargauge.axes[0].minorTicks.position = value;
        }
        circulargauge.refresh();
    }

    function labelPositionValueChange() {
        var labelPosition = document.getElementById('LabelPosition').ej2_instances[0];
        circulargauge.axes[0].labelStyle.position = labelPosition.value.toString();
        circulargauge.refresh();
    }

    function onChange(args) {
        circulargauge.axes[0].showLastLabel = args.checked;
        circulargauge.refresh();
    }
    
    window.addEventListener('load', function () {
        document.getElementById('tickOffset').onpointermove = document.getElementById('tickOffset').ontouchmove =
            document.getElementById('tickOffset').onchange = function () {
                var value = parseInt(document.getElementById('tickOffset').value, 10);
                if (isMajorTicks) {
                    circulargauge.axes[0].majorTicks.offset = value;
                }
                else {
                    circulargauge.axes[0].minorTicks.offset = value;
                }
                document.getElementById('offset').innerHTML = value.toString();
                circulargauge.refresh();
            };
        document.getElementById('tickHeight').onpointermove = document.getElementById('tickHeight').ontouchmove =
            document.getElementById('tickHeight').onchange = function () {
                var value = parseInt(document.getElementById('tickHeight').value, 10);
                if (isMajorTicks) {
                    circulargauge.axes[0].majorTicks.height = value;
                }
                else {
                    circulargauge.axes[0].minorTicks.height = value;
                }
                document.getElementById('height').innerHTML = value.toString();
                circulargauge.refresh();
            };
        document.getElementById('labelOffset').onpointermove = document.getElementById('labelOffset').ontouchmove =
            document.getElementById('labelOffset').onchange = function () {
                var value = parseInt(document.getElementById('labelOffset').value, 10);
                circulargauge.axes[0].labelStyle.offset = value;
                document.getElementById('labelOffsetValue').innerHTML = value.toString();
                circulargauge.refresh();
            };
    });
</script>
@section Title{
    <title>ASP.NET Core CircularGauge Ticks and Labels Example - Syncfusion Demos </title>
                }
@section Header{
    <h1 class='sb-sample-text'>Example of Ticks and Labels in ASP.NET Core CircularGauge Control</h1>
                }