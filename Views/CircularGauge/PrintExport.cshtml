@using Syncfusion.EJ2;
@section Meta{
    <meta name="description" content="This example demonstrates the Print & Export in ASP.NET Core CircularGauge control. Explore here for more details." />
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the print and export functionalities of the circular gauge.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to print and export the rendered circular gauge. You can add print functionality by using the <b>print</b> method when <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.CircularGauge.CircularGauge.html#Syncfusion_EJ2_CircularGauge_CircularGauge_AllowPrint">allowPrint</a> is set as true.
            Also, you can add export functionality by using the <b>export</b> method when <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.CircularGauge.CircularGauge.html#Syncfusion_EJ2_CircularGauge_CircularGauge_AllowImageExport">allowImageExport</a> and <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.CircularGauge.CircularGauge.html#Syncfusion_EJ2_CircularGauge_CircularGauge_AllowPdfExport">allowPdfExport</a> are set as true. The circular gauge can be exported to JPEG, PNG, SVG, and PDF formats.
        </p>
        <p>
            More information about print and export can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/circular-gauge/print-and-export">documentation section</a>.
        </p>
    </div>
}
@section ControlsSection{
	@{
		var labelFont = new Syncfusion.EJ2.CircularGauge.CircularGaugeFont { FontFamily = "inherit"};
		var exportTypeList = new List<CircularGaugeList>
		{
			new CircularGaugeList { Id = "JPEG", Name = "JPEG" },
			new CircularGaugeList { Id = "PNG", Name = "PNG" },
			new CircularGaugeList { Id = "SVG", Name = "SVG" },
			new CircularGaugeList { Id = "PDF", Name = "PDF" },
		};
}
	<div class="col-lg-8 control-section">
		<div id="gauge1">
			<ejs-circulargauge id="gauge" load="gaugeLoad" allowImageExport="true" allowPdfExport="true" allowPrint="true" background="transparent">
				<e-circulargauge-axes>
					<e-circulargauge-axis startAngle="0" direction="AntiClockWise" endAngle="0" minimum="0" maximum="100" radius="80%">
						<e-axis-linestyle width="0"></e-axis-linestyle>
						<e-axis-labelstyle offset="2" position="Outside" useRangeColor="true" hiddenLabel="Last" font="labelFont">
						</e-axis-labelstyle>
						<e-axis-majorticks interval="10" position="Outside" width="1" height="25" useRangeColor="true"></e-axis-majorticks>
						<e-axis-minorticks interval="2" position="Outside" width="1" height="8" useRangeColor="true"></e-axis-minorticks>
						<e-circulargauge-pointers>
							<e-circulargauge-pointer radius="0%">
								<e-pointer-cap radius="0"></e-pointer-cap>
							</e-circulargauge-pointer>
						</e-circulargauge-pointers>
						<e-circulargauge-ranges>
							<e-circulargauge-range start=0 end=32 radius="90%" startWidth="10" endWidth="35" color="#F8A197"></e-circulargauge-range>
							<e-circulargauge-range start=32 end=70 radius="90%" startWidth="10" endWidth="35" color="#C45072"></e-circulargauge-range>
							<e-circulargauge-range start=70 end=100 radius="90%" startWidth="10" endWidth="35" color="#1B679F"></e-circulargauge-range>
						</e-circulargauge-ranges>
					</e-circulargauge-axis>
				</e-circulargauge-axes>
			</ejs-circulargauge>
		</div>
	</div>

	<div class="col-lg-4 property-section">
		<table id="property" title="Properties" style="width: 100%; margin-left: -10px">
			<tr style="height: 50px">
				<td style="width: 40%">
					<div style="width:60%;font-size: 14px;margin-top: -6px">
						Export Type
					</div>
				</td>
				<td style="width: 50%;">
					<div style='margin-top: -5px;height : 45px'>
						<ejs-dropdownlist id="mode" index=0 width="100%" dataSource="@exportTypeList" change="valueChange">
							<e-dropdownlist-fields text="Name" value="Id"></e-dropdownlist-fields>
						</ejs-dropdownlist>
					</div>
				</td>
			</tr>
			<tr style="height: 60px">
				<td style="width: 40%">
					<div style="width:60%;font-size: 14px;margin-top: -6px">File Name</div>
				</td>
				<td style="width: 40%;">
					<div style='margin-top: 0px;height : 45px'>
						<ejs-textbox id="fileName" value="Circular Gauge"></ejs-textbox>
					</div>
				</td>
			</tr>
			<tr id="button-control" style="height: 50px">
				<td align="right" style="padding-right:5%">
					<div style="width: 100px">
						<ejs-button id="export" content="Export" cssClass="e-small" isPrimary="true"></ejs-button>
					</div>
				</td>
				<td align="left" style="padding-left:5%">
					<div style="width: 100px">
						<ejs-button id="print" content="Print" cssClass="e-small" isPrimary="true"></ejs-button>
					</div>
				</td>
			</tr>
		</table>
	</div>	
	<!-- custom code start -->
	<style>
		.control-section {
			min-height: 450px;
		}

		input.e-input.e-bigger, textarea.e-input.e-bigger, .e-bigger input.e-input, .e-bigger textarea.e-input, .e-input-group.e-bigger, .e-bigger .e-input-group, .e-input-group.e-control-wrapper.e-bigger, .e-bigger .e-input-group.e-control-wrapper {
			height: 100%;
			font-size: 14px;
			align-items: center;
		}
	</style>
	<!-- custom code end -->
}
<script>
	window.gaugeLoad = function (args) {
        @* custom code start *@
        var theme = themeName ? themeName : 'Material';
        args.gauge.theme = (theme.charAt(0).toUpperCase() +
            theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');
        @* custom code end *@
		window.gauge = args.gauge;	
	}
	var exportType = "JPEG";
	function valueChange() {
		var mode = document.getElementById('mode').ej2_instances[0];
		exportType = mode.value;
	}

	window.onload = function () {
		document.getElementById("export").onclick = () => {
			var fileName = document.getElementById("fileName").value;
			window.gauge.export(exportType, fileName);
		};
		document.getElementById("print").onclick = () => {
			window.gauge.print();
		};
	};
</script>
@section Title{
                    <title>ASP.NET Core CircularGauge Print & Export Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Print & Export in ASP.NET Core CircularGauge Control</h1>
                }