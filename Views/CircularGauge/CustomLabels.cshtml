@using Syncfusion.EJ2;
@section Meta{
    <meta name="description" content="This example demonstrates the Custom Labels in ASP.NET Core CircularGauge control. Explore here for more details." />
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This example demonstrates how to introduce and position custom labels in a circular gauge. In addition, gradient colors are used on the circular gauge elements such as the pointer and range.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render and configure custom labels in the circular gauge. The label text can be modified using the
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.CircularGauge.CircularGauge.html#Syncfusion_EJ2_CircularGauge_CircularGauge_AxisLabelRender">axisLabelRender</a> event which will be triggered everytime when a label is rendered.
        </p>
        <p>
            More information on the labels can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/circular-gauge/gauge-axes#labels">documentation section</a>.
        </p>
    </div>
}
@section ControlsSection{
    @{
        var labelFont = new Syncfusion.EJ2.CircularGauge.CircularGaugeFont { FontFamily = "inherit" };
    }
    <div class="control-section">
        <ejs-circulargauge id="gauge" axisLabelRender="axisLabelRender" load="gaugeLoad" background="transparent">
            <e-circulargauge-axes>
                <e-circulargauge-axis startAngle="210" endAngle="150" minimum="0" maximum="8" radius="80%">
                    <e-axis-linestyle width="0"></e-axis-linestyle>
                    <e-axis-labelstyle offset="10" font="labelFont"></e-axis-labelstyle>
                    <e-axis-majorticks width="0" color="transparent" interval="1"></e-axis-majorticks>
                    <e-axis-minorticks width="0" color="transparent"></e-axis-minorticks>
                    <e-circulargauge-pointers>
                        <e-circulargauge-pointer value=6.2 radius="85%" color="#E63B86" pointerWidth=10 needleStartWidth=10 needleEndWidth=5 >
                            <e-pointer-cap radius=0></e-pointer-cap>
                            <e-pointer-animation enable=false></e-pointer-animation>
                            <e-pointer-needletail length="0%"></e-pointer-needletail>
                        </e-circulargauge-pointer>
                    </e-circulargauge-pointers>
                    <e-circulargauge-ranges>
                        <e-circulargauge-range start="0" end="6.2" startWidth="22" endWidth="22" color="#E63B86" />
                        <e-circulargauge-range start="6.2" end="8" startWidth="22" endWidth="22" color="#E0E0E0" />
                    </e-circulargauge-ranges>
                </e-circulargauge-axis>
            </e-circulargauge-axes>
        </ejs-circulargauge>
    </div>
}
<script>
    var value = ['0', '2', '5', '10', '20', '50', '100', '150', '200'];
    var rangeLinearGradient = {
        startValue: '0%',
        endValue: '100%',
        colorStop: [
            { color: '#9E40DC', offset: '0%', opacity: 1 },
            { color: '#d93c95', offset: '70%', opacity: 1 },
        ]
    };
    var pointerLinearGradient = {
        startValue: '0%',
        endValue: '100%',
        colorStop: [
            { color: '#9e40dc', offset: '0%', opacity: 0.2 },
            { color: '#9e40dc', offset: '70%', opacity: 0.5 }]
    };
    window.axisLabelRender = function (args) {
        args.text = value[args.value];
    }
    window.gaugeLoad = function (args) {
    @* custom code start *@
        var theme = themeName ? themeName : 'Material';
        args.gauge.theme = (theme.charAt(0).toUpperCase() +
            theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');
    @* custom code end *@
        args.gauge.axes[0].ranges[0].linearGradient = rangeLinearGradient;
        args.gauge.axes[0].pointers[0].linearGradient = pointerLinearGradient;
        args.gauge.animationDuration = 2000;
    }
</script>
@section Title{
    <title>ASP.NET Core CircularGauge Custom Labels Example - Syncfusion Demos </title>
                }
@section Header{
    <h1 class='sb-sample-text'>Example of Custom Labels in Blazor Circular Gauge Control</h1>
                }
