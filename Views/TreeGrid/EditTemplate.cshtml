@using Syncfusion.EJ2


@section ControlsSection{
    <div class="control-section">
        @{
            var dict = new Dictionary<string, object>();
            dict.Add("number", true);
            dict.Add("min", 0);
        }
        <ejs-treegrid id="TreeGrid" dataSource="ViewBag.dataSource" height="400" childMapping="Children" treeColumnIndex="1" toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
            <e-treegrid-editsettings allowAdding="true" allowEditing="true" allowDeleting="true" newRowPosition="Below" mode="Row"></e-treegrid-editsettings>
            <e-treegrid-columns>
                <e-treegrid-column field="TaskId" headerText="Task ID" isPrimaryKey="true" validationRules="@(new { required = true, number = true })" edit="@(new{@params=new{format="n"}})" textAlign="Right" width="100"></e-treegrid-column>
                <e-treegrid-column field="TaskName" headerText="Task Name" validationRules="@(new { required = true })" editType="stringedit" width="190" edit="@(new { create = "create", read = "read", write = "write", destroy ="destroy" })">
                </e-treegrid-column>
                <e-treegrid-column field="StartDate" headerText=" Start Date" validationRules="@(new { date=true})" editType="datepickeredit" textAlign="Right" format="yMd" type="date" width="130"></e-treegrid-column>
                <e-treegrid-column field="Duration" headerText="Duration" validationRules="@(dict)" editType="numericedit" edit="@(new{@params=new{format="n"}})" textAlign="Right" width="120"></e-treegrid-column>
                <e-treegrid-column field="Progress" headerText="Progress" validationRules="@(dict)" editType="numericedit" edit="@(new{@params=new{format="n"}})" textAlign="Right" width="120"></e-treegrid-column>
                <e-treegrid-column field="Priority" headerText="Priority" validationRules="@(new { required=true})" editType="stringedit" width="100"></e-treegrid-column>
            </e-treegrid-columns>
        </ejs-treegrid>
    </div>
    <script>
        var autoCompleteObj, elem;
        function create(args) {
            elem = document.createElement('input');
            return elem;
        }
        function read(args) {
            return autoCompleteObj.value;
        }
        function destroy(args) {
            return autoCompleteObj.destroy();
        }
        function write(args) {
            var treeGridObj = document.getElementById("TreeGrid").ej2_instances[0];
            autoCompleteObj = new ej.dropdowns.AutoComplete({
                dataSource: treeGridObj.grid.dataSource,
                fields: { value: 'TaskName' },
                value: args.rowData[args.column.field]
            });
            autoCompleteObj.appendTo(elem);

        }
    </script>
}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Edit Template in ASP.NET Core Tree Grid control. Explore here for more details."/>
                }

@section ActionDescription{
    <div id="action-description">
        <p>
            This samples demonstrates the TreeGrid Cell Edit template feature. Using Cell Edit Template feature we have rendered the AutoComplete component for <b>Task Name</b> column.
        </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            The cell edit template is used to add a custom component for a particular column by invoking the following functions:
        </p>
        <ul>
            <li><code>create</code> - It is used to create the element at the time of initialization.</li>
            <li><code>write</code> - It is used to create the custom component or assign default value at the time of editing.</li>
            <li><code>read</code> - It is used to read the value from the component at the time of save.</li>
            <li><code>destroy</code> - It is used to destroy the component.</li>
        </ul>
        <p>
            In this demo, we have rendered the AutoComplete component for �Task Name� column of TreeGrid using <code>edit</code> property.
        </p>
        <br>

        <p>
            More information on the data binding can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/tree-grid/editing/template-editing">documentation section</a>.
        </p>
    </div>
}

@*custom code end*@
@section Title{
                    <title>ASP.NET Core Tree Grid Edit Template Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Edit Template in ASP.NET Core Tree Grid Control</h1>
                }