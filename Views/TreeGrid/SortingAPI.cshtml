@using Syncfusion.EJ2


@section ControlsSection{
    <div class="col-lg-8 control-section">
        <div class="content-wrapper">
            <ejs-treegrid id="TreeGrid" dataSource="ViewBag.dataSource" allowSorting="true" height="410" childMapping="Children" treeColumnIndex="1">
                <e-treegrid-columns>
                    <e-treegrid-column field="TaskId" headerText="Task ID" textAlign="Right" width="90"></e-treegrid-column>
                    <e-treegrid-column field="TaskName" headerText="Task Name" width="170"></e-treegrid-column>
                    <e-treegrid-column field="Duration" headerText="Duration" textAlign="Right" width="90"></e-treegrid-column>
                    <e-treegrid-column field="Progress" headerText="Progress" textAlign="Right" width="90"></e-treegrid-column>
                </e-treegrid-columns>
            </ejs-treegrid>
        </div>
    </div>

    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tr>
                <td style="width: 30%">
                    <div>Column</div>
                </td>
                <td style="width: 70%;padding-right: 10px">
                    <div id='columnddl'>
                        <ejs-dropdownlist id="Columns" dataSource="@ViewBag.columnsdata" placeholder="Select a Column" index="0" popupHeight="220px">
                            <e-dropdownlist-fields text="name" value="id"></e-dropdownlist-fields>
                        </ejs-dropdownlist>
                    </div>
                </td>
            </tr>
            <tr>
                <td style="width: 30%">
                    <div>Direction</div>
                </td>
                <td style="width: 70%;padding-right: 10px">
                    <div>
                        <ejs-dropdownlist id="direction" dataSource="@ViewBag.directionData" placeholder="Select a Direction" index="0" popupHeight="220px">
                            <e-dropdownlist-fields text="name" value="id"></e-dropdownlist-fields>
                        </ejs-dropdownlist>
                    </div>
                </td>
            </tr>
            <tr>
                <td style="width: 30%">
                    <div>
                        <ejs-button id="sort" cssClass="btn btn-default" content="Sort"></ejs-button>
                    </div>

                </td>
                <td style="width: 70%; padding:10px 10px 10px 0px">
                    <div>
                        <ejs-button id="clear" cssClass="btn btn-default" content="Clear"></ejs-button>
                    </div>
                </td>
            </tr>
        </table>
    </div>

    <script>
        document.getElementById('sort').onclick = () => {
            var dropDownColumns = document.getElementById("Columns").ej2_instances[0];
            var dropDownDirection = document.getElementById("direction").ej2_instances[0];
            var treegrid = document.getElementById("TreeGrid").ej2_instances[0];
            let columnName = dropDownColumns.value;
            let sortType = dropDownDirection.value;
            treegrid.sortByColumn(columnName, sortType, false);
        };
        document.getElementById('clear').onclick = () => {
            var treegrid = document.getElementById("TreeGrid").ej2_instances[0];
            treegrid.clearSorting();
        };
    </script>

    @*custom code start*@

    <style>
        #columnddl {
            min-width: 130px;
        }
    </style>

    @*custom code end*@
}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Sorting API in ASP.NET Core Tree Grid control. Explore here for more details."/>
                }

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the usage of sorting API in TreeGrid. Through property panel, we can sort/unsort the columns using corresponding sorting API.
        </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            Sorting feature enables us to order the data in a particular direction. It can be enabled by setting the <code>allowSorting</code> as true.
        </p>
        <p class="e-treegrid" style="border:none">
            To sort a TreeGrid column simply click the column header. The icons <span class="e-icons e-icon-ascending"></span>(ascending)
            and <span class="e-icons e-icon-descending"></span>(descending) specifies the sort direction of a column.
        </p>
        <p>
            By default, multi-sorting is enabled in TreeGrid, to sort multiple column hold <strong>CTRL</strong> key and click the column
            header. To clear sort for a column, hold <strong>SHIFT</strong> key and click the column header.
        </p>
        <p>
            While using TreeGrid in a touch device, you have an option for multi sorting in single tap on the treegrid header. By tapping on
            the treegrid header, it will show the toggle button in small popup with sort icon. Now tap the button to enable the multi-sorting
            in single tap.
        </p>
        <p>
            In this demo, select the column and direction from the properties panel then click the Sort button. Use the Clear button
            to remove sort for the selected column.
        </p>
        <p>
            More information on the data binding can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/tree-grid/sorting">documentation section</a>.
        </p>
    </div>
}

@*custom code end*@
@section Title{
                    <title>ASP.NET Core Tree Grid Sorting API Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Sorting API in ASP.NET Core Tree Grid Control</h1>
                }