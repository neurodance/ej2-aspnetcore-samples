@using Syncfusion.EJ2


@section ControlsSection{
    <div class="col-lg-9 control-section">
        <div class="control-wrapper">
            <div class="control-section">
                @{
                    var dict = new Dictionary<string, object>();
                    dict.Add("number", true);
                    dict.Add("min", 0);
                }
                <ejs-treegrid id="TreeGrid" dataSource="ViewBag.dataSource" selectedRowIndex="2" height="400" load="load" childMapping="Children" treeColumnIndex="1" toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel", "Indent", "Outdent" })">
                    <e-treegrid-editsettings allowAdding="true" allowEditing="true" allowDeleting="true" newRowPosition="Below"></e-treegrid-editsettings>
                    <e-treegrid-columns>
                        <e-treegrid-column field="TaskId" headerText="Task ID" isPrimaryKey="true" validationRules="@(new { required=true, number=true})" textAlign="Right" width="100"></e-treegrid-column>
                        <e-treegrid-column field="TaskName" headerText="Task Name" validationRules="@(new { required=true})" editType="stringedit" width="210"></e-treegrid-column>
                        <e-treegrid-column field="StartDate" headerText=" Start Date" validationRules="@(new { date=true})" editType="datepickeredit" textAlign="Right" format="yMd" type="date" width="165"></e-treegrid-column>
                        <e-treegrid-column field="Duration" headerText="Duration" validationRules="@(dict)" editType="numericedit" textAlign="Right" edit="@(new{@params=new{format="n"}})" width="135"></e-treegrid-column>
                    </e-treegrid-columns>
                </ejs-treegrid>
            </div>
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tr style="height: 50px">
                <td style="width: 30%">
                    <div>Edit Mode</div>
                </td>
                <td style="width: 50%;padding-right: 10px">
                    <div id='columnddl'>
                        <ejs-dropdownlist id="EditMode" dataSource="@ViewBag.DropDownData" width="120" value="@("CellEditing")" change="change">
                            <e-dropdownlist-fields text="name" value="id"></e-dropdownlist-fields>
                        </ejs-dropdownlist>
                    </div>
                </td>
            </tr>
        </table>
    </div>
    <script>
        function change(e) {
            var treeGridObj = document.getElementById("TreeGrid").ej2_instances[0];
            if (e.value === 'CellEditing') {
                treeGridObj.editSettings.mode = 'Cell';
                treeGridObj.toolbar = ['Add', 'Delete', 'Update', 'Cancel', 'Indent', 'Outdent'];
            } else {
                treeGridObj.editSettings.mode = 'Row';
                treeGridObj.toolbar = ['Add', 'Edit', 'Delete', 'Update', 'Cancel', 'Indent', 'Outdent'];
            }
        }
        function load() {
            var treeGridObj = document.getElementById("TreeGrid").ej2_instances[0];
            treeGridObj.editSettings.mode = "Cell";
        }
    </script>
}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Inline Editing in ASP.NET Core Tree Grid control. Explore here for more details."/>
                }

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates CRUD operations in TreeGrid. You can perform CRUD operations as follows,
        </p>
        <ul>
            <li><code>Add </code> - To add new record, click Add toolbar button.</li>
            <li><code>Edit</code> - To edit record, double click a row or click toolbar Edit button after selected a row.</li>
            <li><code>Delete</code> - To delete record, click toolbar Delete button after selected a row.</li>
            <li><code>Update, Cancel</code> - You can save or discard changes by click toolbar Update and Cancel button respectively.</li>
            <li><code>Indent</code> - Indents the record to one level of hierarchy.</li>
            <li><code>Outdent</code> - Outdent the record to one level of hierarchy.</li>
        </ul>
        <p>
            Also select the edit mode as Cell or Row from property panel to change the mode of editing.
        </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            The TreeGrid supports CRUD operations. This CRUD operations can be configured in TreeGrid using <code>editSettings</code>. Also, it has different modes to manipulate the datasource.
        </p>
        <p>
            The available modes are,
        </p>
        <ul>
            <li><code>Row </code></li>
            <li><code>Cell</code></li>
            <li><code>Dialog</code></li>
        </ul>
        <p>
            In this demo, Row mode is enabled for editing by default. You can start editing any row by double clicking on it or clicking on toolbarï¿½s Edit button, then the currently selected row will be changed to edited state. You can change the row values and save edited data to the datasource.
        </p>
        <p>
            We have also provided an option in property panel to select the edit mode as Cell or Row to change <code>mode</code> of editing.
        </p>
        <br />

        <p>
            More information on the data binding can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/tree-grid/editing/row-editing">documentation section</a>.
        </p>
    </div>
}

@*custom code end*@
@section Title{
                    <title>ASP.NET Core Tree Grid Inline Editing Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Inline Editing in ASP.NET Core Tree Grid Control</h1>
                }
