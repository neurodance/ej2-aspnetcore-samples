@using Syncfusion.EJ2

@{
    ViewData["Title"] = "Overview";
    string timelineTemplate = "<div class='template'><div class='icon-child'><input  id='timeline_views'></input ></div><div class='text-child'>Timeline Views</div></div>";
    string groupTemplate = "<div class='template'><div class='icon-child'><input id='grouping'></input></div><div class='text-child'>Grouping</div></div>";
    string gridlineTemplate = "<div class='template'><div class='icon-child'><input id='timeSlots'></input></div><div class='text-child'>Time Slots</div></div>";
    string autoHeightTemplate = "<div class='template'><div class='icon-child''><input id='row_auto_height'></input></div><div class='text-child'>Auto Fit Rows</div></div>";
    string dateHeaderTemplate = "<div class='date - text'>${getDateHeaderDay(data.date)}</div><div class='date - text'>${getDateHeaderDate(data.date)}</div>${getWeather(data.date)}";
    string timezone = "Etc/GMT";
    string timeformat = "hh:mm a";
    string weeknumber = "Off";
    string tooltip = "Off";
}

@section ControlsSection{
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="schedule-overview">
                    <ejs-appbar id="defaultAppBar" colorMode="Primary">
                        <e-content-template>
                            <span class="time e-icons e-time-zone"></span>
                            <span id="timezoneBtn" class="time ">UTC</span>
                            <span class="time e-icons e-clock"></span>
                            <span id="timeBtn" class="time current-time">Time</span>
                            <div class="e-appbar-spacer"></div>
                            <div class="control-panel calendar-export">
                            <ejs-button id="printBtn" cssClass="title-bar-btn e-inherit" content="Print" iconCss="e-icons e-print"></ejs-button>
                            </div>
                        <div class="control-panel import-button">
                                <ejs-uploader id="icalendar" allowedExtensions=".ics" cssClass="calendar-import" showFileList="false" created="uploaderCreated" selected="onSelected" multiple="false">
                                    <e-uploader-buttons browse="Import"></e-uploader-buttons>
                                </ejs-uploader>
                            </div>
                            <div class="control-panel calendar-export">
                            <ejs-dropdownbutton id="exportBtn" content="Export" cssClass="e-inherit" items="ViewBag.ExportItems" select="onExportItemSelect"></ejs-dropdownbutton>
                            </div>
                            <ejs-button id="settingsBtn" cssClass="overview-toolbar-settings e-inherit" content="" iconCss="e-icons e-settings" iconPosition="Top"></ejs-button>
                    
                        </e-content-template>
                    </ejs-appbar>
                    <ejs-toolbar id="toolbarOptions" cssClass='overview-toolbar' height="70px" overflowMode="Scrollable" scrollStep="100" created="onToolbarCreated" clicked="onToolbarItemClick">
                            <e-toolbar-items>
                                <e-toolbar-item prefixIcon="e-icons e-plus" tooltipText="New Event" text="New Event" tabindex="0"></e-toolbar-item>
                                <e-toolbar-item prefixIcon="e-icons e-repeat" tooltipText="New Recurring Event" text="New Recurring Event" tabindex="0"></e-toolbar-item>
                                <e-toolbar-item type="Separator"></e-toolbar-item>
                                <e-toolbar-item prefixIcon="e-icons e-day" tooltipText="Day" text="Day" tabindex="0"></e-toolbar-item>
                                <e-toolbar-item prefixIcon="e-icons e-week" tooltipText="Week" text="Week" tabindex="0"></e-toolbar-item>
                                <e-toolbar-item prefixIcon="e-icons e-week" tooltipText="WorkWeek" text="WorkWeek" tabindex="0"></e-toolbar-item>
                                <e-toolbar-item prefixIcon="e-icons e-month" tooltipText="Month" text="Month" tabindex="0"></e-toolbar-item>
                                <e-toolbar-item prefixIcon="e-icons e-month" tooltipText="Year" text="Year" tabindex="0"></e-toolbar-item>
                                <e-toolbar-item prefixIcon="e-icons e-agenda-date-range" tooltipText="Agenda" text="Agenda" tabindex="0"></e-toolbar-item>
                                <e-toolbar-item tooltipText="Timeline Views" template="@timelineTemplate" tabindex="0"></e-toolbar-item>
                                <e-toolbar-item type="Separator"></e-toolbar-item>
                                <e-toolbar-item tooltipText="Resource Grouping" template="@groupTemplate" tabindex="0"></e-toolbar-item>
                                <e-toolbar-item tooltipText="Gridlines" template="@gridlineTemplate" tabindex="0"></e-toolbar-item>
                                <e-toolbar-item tooltipText="Row Auto Height" template="@autoHeightTemplate" tabindex="0"></e-toolbar-item>
                            </e-toolbar-items>
                     </ejs-toolbar>
                <div class="overview-content">
                    <div class="left-panel">
                        <div class="overview-scheduler">
                            <ejs-schedule id="scheduler" cssClass="schedule-overview" height="100%" timezone="UTC" dateHeaderTemplate="@dateHeaderTemplate">
                                <e-schedule-resources>
                                    <e-schedule-resource field="CalendarId" title="Calendars" name="Calendars" allowMultiple="true" dataSource="@ViewBag.Calendars" query="new ej.data.Query().where('CalendarId', 'equal', 1)" textField="CalendarName" idField="CalendarId" colorField="CalendarColor"></e-schedule-resource>
                                </e-schedule-resources>
                                <e-schedule-group resources="@ViewBag.Resources"></e-schedule-group>
                                <e-schedule-views>
                                    <e-schedule-view option="Day"></e-schedule-view>
                                    <e-schedule-view option="Week"></e-schedule-view>
                                    <e-schedule-view option="WorkWeek"></e-schedule-view>
                                    <e-schedule-view option="Month"></e-schedule-view>
                                    <e-schedule-view option="Year"></e-schedule-view>
                                    <e-schedule-view option="Agenda"></e-schedule-view>
                                    <e-schedule-view option="TimelineDay"></e-schedule-view>
                                    <e-schedule-view option="TimelineWeek"></e-schedule-view>
                                    <e-schedule-view option="TimelineWorkWeek"></e-schedule-view>
                                    <e-schedule-view option="TimelineMonth"></e-schedule-view>
                                    <e-schedule-view option="TimelineYear"></e-schedule-view>
                                </e-schedule-views>
                                <e-schedule-eventsettings dataSource="@ViewBag.Appointments"></e-schedule-eventsettings>
                            </ejs-schedule>
                            <ejs-contextmenu id="overviewContextMenu" cssClass="schedule-context-menu" target=".e-schedule" items="@ViewBag.MenuItems" beforeOpen="onContextMenuBeforeOpen" select="onMenuItemSelect"></ejs-contextmenu>
                        </div>
                    </div>
                    <div class="right-panel hide">
                        <div class="control-panel e-css">
                             <div class="col-row">
                                <div class="col-left">
                                    <label style="line-height: 34px; margin: 0;">Calendar</label>
                                </div>
                                <div class="col-right">
                                    <ejs-multiselect id="resources" cssClass="schedule-workweek" dataSource="@ViewBag.Calendars" mode="CheckBox" enableSelectionOrder="false" showClearButton="false" showDropDownIcon="true" popupHeight="150px" value="new int[] {1}" change="onCalendarChange">
                                        <e-multiselect-fields text="CalendarName" value="CalendarId"></e-multiselect-fields>
                                    </ejs-multiselect>
                                </div>
                            </div>
                            <div class="col-row">
                                <div class="col-left">
                                    <label style="line-height: 34px; margin: 0;">First Day of Week</label>
                                </div>
                                <div class="col-right">
                                    <ejs-dropdownlist id="weekFirstDay" dataSource="@ViewBag.WeekDays" value="0" popupHeight="150px" change="onWeekFirstDayChange">
                                        <e-dropdownlist-fields text="text" value="value"></e-dropdownlist-fields>
                                    </ejs-dropdownlist>
                                </div>
                            </div>
                            <div class="col-row">
                                <div class="col-left">
                                    <label style="line-height: 34px; margin: 0;">Work week</label>
                                </div>
                                <div class="col-right">
                                    <ejs-multiselect id="workWeekDays" cssClass="schedule-workweek" dataSource="@ViewBag.WeekDays" mode="CheckBox" enableSelectionOrder="false" showClearButton="false" showDropDownIcon="true" popupHeight="150px" value="new int[] {1,2,3,4,5}" change="onWeekDaysChange">
                                        <e-multiselect-fields text="text" value="value"></e-multiselect-fields>
                                    </ejs-multiselect>
                                </div>
                            </div>
                            <div class="col-row">
                                <div class="col-left">
                                    <label style="line-height: 34px; margin: 0;">Timezone</label>
                                </div>
                                <div class="col-right">
                                    <ejs-dropdownlist id="timezone" dataSource="@ViewBag.TimezoneData" value="timezone" popupHeight="150px" change="onTimezoneChange">
                                        <e-dropdownlist-fields text="text" value="value"></e-dropdownlist-fields>
                                    </ejs-dropdownlist>
                                </div>
                            </div>
                            <div class="col-row">
                                <div class="col-left">
                                    <label style="line-height: 34px; margin: 0;">Day Start Hour</label>
                                </div>
                                <div class="col-right">
                                    <ejs-timepicker id="dayStartHour" showClearButton="false" value="new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0)" change="onDayStartHourChange"></ejs-timepicker>
                                </div>
                            </div>
                            <div class="col-row">
                                <div class="col-left">
                                    <label style="line-height: 34px; margin: 0;">Day End Hour</label>
                                </div>
                                <div class="col-right">
                                    <ejs-timepicker id="dayEndHour" showClearButton="false" value="new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 23, 59, 59)" change="onDayEndHourChange"></ejs-timepicker>
                                </div>
                            </div>
                            <div class="col-row">
                                <div class="col-left">
                                    <label style="line-height: 34px; margin: 0;">Work Start Hour</label>
                                </div>
                                <div class="col-right">
                                    <ejs-timepicker id="workHourStart" showClearButton="false" value="new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 9, 0, 0)" change="onWorkStartHourChange"></ejs-timepicker>
                                </div>
                            </div>
                            <div class="col-row">
                                <div class="col-left">
                                    <label style="line-height: 34px; margin: 0;">Work End Hour</label>
                                </div>
                                <div class="col-right">
                                    <ejs-timepicker id="workHourEnd" showClearButton="false" value="new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 18, 0, 0)" change="onWorkEndHourChange"></ejs-timepicker>
                                </div>
                            </div>
                            <div class="col-row">
                                <div class="col-left">
                                    <label style="line-height: 34px; margin: 0;">Slot Duration</label>
                                </div>
                                <div class="col-right">
                                    <ejs-dropdownlist id="slotDuration" dataSource="@ViewBag.SlotIntervalDataSource" value="60" popupHeight="150px" change="onSlotIntervalChange">
                                        <e-dropdownlist-fields text="Name" value="Value"></e-dropdownlist-fields>
                                    </ejs-dropdownlist>
                                </div>
                            </div>
                            <div class="col-row">
                                <div class="col-left">
                                    <label style="line-height: 34px; margin: 0;">Slot Interval</label>
                                </div>
                                <div class="col-right">
                                    <ejs-dropdownlist id="slotInterval" dataSource="new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }" value="2" popupHeight="150px" change="onSlotCountChange">
                                        <e-dropdownlist-fields text="text" value="value"></e-dropdownlist-fields>
                                    </ejs-dropdownlist>
                                </div>
                            </div>
                            <div class="col-row">
                                <div class="col-left">
                                    <label style="line-height: 34px; margin: 0;">Time Format</label>
                                </div>
                                <div class="col-right">
                                    <ejs-dropdownlist id="timeFormat" dataSource="@ViewBag.TimeFormat" value="timeformat" popupHeight="150px" change="onTimeFormatChange">
                                        <e-dropdownlist-fields text="Name" value="Value"></e-dropdownlist-fields>
                                    </ejs-dropdownlist>
                                </div>
                            </div>
                            <div class="col-row">
                                <div class="col-left">
                                    <label style="line-height: 34px; margin: 0;">Week Numbers</label>
                                </div>
                                <div class="col-right">
                                    <ejs-dropdownlist id="week_number" dataSource="@ViewBag.WeekNumber" value="weeknumber" popupHeight="150px" change="onWeekNumberChange">
                                        <e-dropdownlist-fields text="Name" value="Value"></e-dropdownlist-fields>
                                    </ejs-dropdownlist>
                                </div>
                            </div>
                            <div class="col-row">
                                <div class="col-left">
                                    <label style="line-height: 34px; margin: 0;">Tooltip</label>
                                </div>
                                <div class="col-right">
                                    <ejs-dropdownlist id="tooltip" dataSource="@ViewBag.Tooltip" value="tooltip" popupHeight="150px" change="onTooltipChange">
                                        <e-dropdownlist-fields text="Name" value="Value"></e-dropdownlist-fields>
                                    </ejs-dropdownlist>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <style>

        .tailwind .schedule-overview .overview-content .right-panel .control-panel {
            background-color: #f3f4f6;
        }

        .tailwind-dark .schedule-overview .overview-content .right-panel .control-panel {
            background-color: #374151;
            color: #fff;
        }

        .material .schedule-overview .overview-content .right-panel .control-panel {
            background-color: #fafafa;
        }

        .material-dark .schedule-overview .overview-content .right-panel .control-panel {
            background-color: #2a2a2a;
            color: #ffff;
        }

        .fabric .schedule-overview .overview-content .right-panel .control-panel {
            background-color: #ffffff;
        }

        .fabric-dark .schedule-overview .overview-content .right-panel .control-panel {
            background-color: #333232;
            color: #fff;
        }

        .fluent .schedule-overview .overview-content .right-panel .control-panel {
            background-color: #f3f2f1;
        }

        .fluent-dark .schedule-overview .overview-content .right-panel .control-panel {
            background-color: #252423;
            border-color: #c1c1c1;
            color: #fff;
        }

        .bootstrap .schedule-overview .overview-content .right-panel .control-panel {
            background-color: #f8f8f8;
        }

        .bootstrap-dark .schedule-overview .overview-content .right-panel .control-panel {
            background-color: #2a2a2a;
            color: #fff;
        }

        .bootstrap5 .schedule-overview .overview-content .right-panel .control-panel {
            background-color: #f8f9fa;
            color: #212529;
        }

        .bootstrap5-dark .schedule-overview .overview-content .right-panel .control-panel {
            background-color: #343a40;
            color: #fff;
        }

        .highcontrast .schedule-overview .overview-content .right-panel .control-panel {
            background-color: #000000;
            color: #ffffff;
        }

        .material3 .schedule-overview .overview-content .right-panel .control-panel {
            background-color: #f3f1f8;
        }

        .material3-dark .schedule-overview .overview-content .right-panel .control-panel {
            background-color: #2a2731;
        }

        .schedule-overview .overview-toolbar.e-rtl + *{
            flex-direction: row-reverse;
        }

        .schedule-overview .overview-toolbar.e-toolbar {
            border-radius: 0;
        }

        .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn.e-tbtn-txt {
            display: inline-grid;
        }

        .material .schedule-overview .overview-toolbar.e-toolbar {
            border-style: solid;
        }

        .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item:not(.e-separator) {
            padding: 3.5px;
        }

        .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-btn.e-tbar-btn .e-icons.e-btn-icon,
        .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-btn.e-tbar-btn .e-tbar-btn-text {
            line-height: 23px !important;
            min-height: 23px !important;
            padding: 0px !important;
        }

        .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item.e-template {
            margin: 0 5px;
        }

        .schedule-overview .overview-content {
            display: flex;
        }

        .schedule-overview .overview-content .left-panel {
            height: 700px;
            width: 100%;
        }

        .schedule-overview .overview-content .right-panel {
            display: block;
            height: 700px;
            transform: translateX(0%);
            transition: transform .5s ease, width 500ms;
            width: 500px;
        }

        .schedule-overview .overview-content .right-panel.hide {
            display: none;
            transform: translateX(100%);
            transition: transform .5s ease, width 500ms;
            width: 0;
        }

        .schedule-overview .overview-content .right-panel .control-panel {
            background: #f8f9fa;
            font-size: 14px;
            height: 100%;
            overflow: auto;
            padding: 15px;
            width: 100%;
        }

        .schedule-overview .overview-content .right-panel .control-panel .col-row {
            display: flex;
            flex-wrap: wrap;
        }

        .schedule-overview .overview-content .right-panel .control-panel label {
            font-weight: 500;
        }

        .schedule-overview .overview-content .right-panel .control-panel .col-left {
            flex: 0 0 41.666667%;
            max-width: 41.666667%;
            margin-bottom: 1rem;
        }

        .schedule-overview .overview-content .right-panel .control-panel .col-right {
            flex: 0 0 58.333333%;
            max-width: 58.333333%;
            margin-bottom: 1rem;
        }

        .schedule-overview .overview-scheduler {
            height: 100%;
            width: 100%;
        }

        .schedule-overview .e-schedule-toolbar .e-views,
        .schedule-overview .e-schedule-toolbar .e-schedule-seperator,
        .schedule-workweek.e-multi-select-list-wrapper.e-checkbox .e-filter-parent,
        .schedule-resource.e-multi-select-list-wrapper.e-checkbox .e-filter-parent {
            display: none;
        }

        .schedule-overview .e-timeline-view .e-resource-left-td,
        .schedule-overview .e-timeline-month-view .e-resource-left-td {
            width: 120px;
        }

        .schedule-resource.e-multi-select-list-wrapper.e-checkbox .e-list-parent:first-child li:first-child {
            background-image: none;
            opacity: .5;
            pointer-events: none;
            user-select: none;
        }

        .schedule-overview .calendar-import.e-upload {
            border: 0;
            padding-left: 0 !important;
        }

        .schedule-overview .calendar-import.e-upload .e-btn-icon {
            margin-left: initial;
        }

        .schedule-overview .calendar-import.e-upload .e-file-select-wrap {
            padding: 0
        }

        .schedule-overview .calendar-import.e-upload .e-file-select-wrap .e-file-drop,
        .calendar-import .e-upload-files {
            display: none;
        }

        .e-bigger .schedule-context-menu ul .e-menu-item .e-menu-icon {
            font-size: 14px;
        }

        .schedule-context-menu ul .e-menu-item .e-menu-icon {
            font-size: 12px;
        }

        .schedule-overview.e-schedule .e-vertical-view .e-header-cells,
        .schedule-overview.e-schedule .e-timeline-month-view .e-header-cells {
            padding: 0;
            text-align: center !important;
        }

        .schedule-overview.e-schedule .date-text {
            font-size: 14px;
        }

        .schedule-overview.e-schedule.e-device .date-text {
            font-size: 12px;
        }

        .schedule-overview.e-schedule .weather-image {
            width: 20px;
            height: 20px;
            background-position: center center;
            background-repeat: no-repeat;
            background-size: cover;
        }

        .schedule-overview.e-schedule .e-month-view .weather-image {
            float: right;
            margin: -20px 2px 0 0;
            width: 20px;
            height: 20px;
        }

        .fluent .e-appbar .e-btn-icon.e-icons,
        .fluent-dark .e-appbar .e-btn-icon.e-icons {
            margin-top: -2px;
        }

        .fluent .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame,
        .fluent-dark .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame {
            height: 17px;
            line-height: 17px;
            width: 17px;
        }

        .fluent .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame.e-check,
        .fluent-dark .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame.e-check {
            font-size: 15px;
            line-height: 16px;
        }

        .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn {
            padding-top: 2px;
            padding-bottom: 2px;
        }

        #exportBtn {
            white-space: nowrap;
        }

        .time {
            display: flex;
            gap: 5px;
            align-items: center;
            padding: 0 5px;
        }

        .template {
            height: 46px;
            line-height: 23px;
        }

        .template .icon-child {
            text-align: center;
            height: 23px !important;
        }

        .template .text-child {
            font-size: 14px;
            line-height: 23px !important;
        }

        @@media (max-width: 481px) {
            .schedule-overview .overview-content .right-panel {
                position: absolute;
                width: 90%;
            }

            .import-button,
            #printBtn,
            #exportBtn {
                display: none;
            }

        }

        @@media (max-width: 1024px) {
            .schedule-overview .overview-content .right-panel .control-panel .col-row {
                display: initial;
            }

            .schedule-overview .overview-content .right-panel .control-panel .col-left {
                flex: initial;
                max-width: initial;
                margin-bottom: initial;
            }

            .schedule-overview .overview-content .right-panel .control-panel .col-right {
                flex: initial;
                max-width: initial;
            }
        }
    </style>

    <script type="text/javascript">
        var selectedTarget;
        var isTimelineView = false;
        var intlObj = new ej.base.Internationalization();

        window.getDateHeaderDay = function (value) {
            return intlObj.formatDate(value, { skeleton: 'E' });
        };
        window.getDateHeaderDate = function (value) {
            return intlObj.formatDate(value, { skeleton: 'd' });
        };

        window.getWeather = function (date) {
            switch (date.getDay()) {
                case 0:
                    return '<img class="weather-image" src="@Url.Content("~/css/schedule/images/weather-clear.svg")"/>';
                case 1:
                    return '<img class="weather-image" src="@Url.Content("~/css/schedule/images/weather-clouds.svg")"/>';
                case 2:
                    return '<img class="weather-image" src="@Url.Content("~/css/schedule/images/weather-rain.svg")"/>';
                case 3:
                    return '<img class="weather-image" src="@Url.Content("~/css/schedule/images/weather-clouds.svg")"/>';
                case 4:
                    return '<img class="weather-image" src="@Url.Content("~/css/schedule/images/weather-rain.svg")"/>';
                case 5:
                    return '<img class="weather-image" src="@Url.Content("~/css/schedule/images/weather-clear.svg")"/>';
                case 6:
                    return '<img class="weather-image" src="@Url.Content("~/css/schedule/images/weather-clouds.svg")"/>';
                default:
                    return null;
            }
        };

        document.getElementById("printBtn").addEventListener("click", function () {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            scheduleObj.print();
        });

        function onContextMenuBeforeOpen(args) {
            var newEventElement = document.querySelector('.e-new-event');
            if (newEventElement) {
                ej.base.remove(newEventElement);
                ej.base.removeClass([document.querySelector('.e-selected-cell')], 'e-selected-cell');
            }
            var scheduleObj = document.querySelector(".e-schedule").ej2_instances[0];
            scheduleObj.closeQuickInfoPopup();
            var targetElement = args.event.target;
            if (ej.base.closest(targetElement, '.e-contextmenu')) {
                return;
            }
            selectedTarget = ej.base.closest(targetElement, '.e-appointment,.e-work-cells,' +
                '.e-vertical-view .e-date-header-wrap .e-all-day-cells,.e-vertical-view .e-date-header-wrap .e-header-cells');
            if (ej.base.isNullOrUndefined(selectedTarget)) {
                args.cancel = true;
                return;
            }
            if (selectedTarget.classList.contains('e-appointment')) {                
                var eventObj = scheduleObj.getEventDetails(selectedTarget);
                if (eventObj.RecurrenceRule) {
                    this.showItems(['EditRecurrenceEvent', 'DeleteRecurrenceEvent'], true);
                    this.hideItems(['Add', 'AddRecurrence', 'Today', 'Save', 'Delete'], true);
                } else {
                    this.showItems(['Save', 'Delete'], true);
                    this.hideItems(['Add', 'AddRecurrence', 'Today', 'EditRecurrenceEvent', 'DeleteRecurrenceEvent'], true);
                }
                return;
            } else if ((selectedTarget.classList.contains('e-work-cells') || selectedTarget.classList.contains('e-all-day-cells')) &&
                !selectedTarget.classList.contains('e-selected-cell')) {
                ej.base.removeClass([].slice.call(scheduleObj.element.querySelectorAll('.e-selected-cell')), 'e-selected-cell');
                selectedTarget.classList.add('e-selected-cell');
                selectedTarget.setAttribute('aria-selected', 'true');
            }
            this.hideItems(['Save', 'Delete', 'EditRecurrenceEvent', 'DeleteRecurrenceEvent'], true);
            this.showItems(['Add', 'AddRecurrence', 'Today'], true);
        }

        function onMenuItemSelect(args) {
            var scheduleObj = document.querySelector(".e-schedule").ej2_instances[0];
            var selectedMenuItem = args.item.id;
            var eventObj;
            if (selectedTarget.classList.contains('e-appointment')) {
                eventObj = scheduleObj.getEventDetails(selectedTarget);
            }
            switch (selectedMenuItem) {
                case 'Today':
                    scheduleObj.selectedDate = new Date();
                    break;
                case 'Add':
                case 'AddRecurrence':
                    var selectedCells = scheduleObj.getSelectedElements();
                    var activeCellsData = scheduleObj.getCellDetails(selectedCells.length > 0 ? selectedCells : selectedTarget);
                    if (selectedMenuItem === 'Add') {
                        scheduleObj.openEditor(activeCellsData, 'Add');
                    } else {
                        scheduleObj.openEditor(activeCellsData, 'Add', null, 1);
                    }
                    break;
                case 'Save':
                case 'EditOccurrence':
                case 'EditSeries':
                    if (selectedMenuItem === 'EditSeries') {
                        eventObj = new ej.data.DataManager(scheduleObj.eventsData).executeLocal(new ej.data.Query().
                            where(scheduleObj.eventFields.id, 'equal', eventObj[scheduleObj.eventFields.recurrenceID]))[0];
                    }
                    scheduleObj.openEditor(eventObj, selectedMenuItem);
                    break;
                case 'Delete':
                    scheduleObj.deleteEvent(eventObj);
                    break;
                case 'DeleteOccurrence':
                case 'DeleteSeries':
                    scheduleObj.deleteEvent(eventObj, selectedMenuItem);
                    break;
            }
        }

        function updateLiveTime() {
            var scheduleObj = document.getElementById('scheduler').ej2_instances;
            var scheduleTimezone = scheduleObj.length > 0 ? scheduleObj[0].timezone : 'Etc/GMT';
            var timeBtn = document.querySelector('.schedule-overview #timeBtn');
            if (!timeBtn) {
                return;
            }
            if (scheduleObj[0].isAdaptive) {
                timeBtn.innerHTML = new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', timeZone: scheduleTimezone });
            }
            else {
                timeBtn.innerHTML = new Date().toLocaleTimeString('en-US', { timeZone: scheduleTimezone });
            }
        }

        function uploaderCreated() {
            var uploader = document.getElementById('icalendar');
            if (uploader) {
                var uploaderObj = uploader.ej2_instances[0];
                var template = '<div class="e-template-btn"><span class="e-btn-icon e-icons e-upload-1 e-icon-left"></span>${text}</div>';
                uploaderObj.buttons = { browse: ej.base.compile(template.trim())({ text: 'Import' })[0] };
            }
            document.querySelector('.calendar-import .e-btn').classList.add('e-inherit');
        }

        function onSelected(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            scheduleObj.importICalendar(args.event.target.files[0]);
        }

        function onToolbarCreated() {
            setInterval(function () { updateLiveTime(); }, 1000);
            var timelineView = new ej.buttons.CheckBox({
                checked: false,
                change: function (args) {
                    var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
                    isTimelineView = args.checked;
                    switch (scheduleObj.currentView) {
                        case 'Day':
                        case 'TimelineDay':
                            scheduleObj.currentView = isTimelineView ? 'TimelineDay' : 'Day';
                            break;
                        case 'Week':
                        case 'TimelineWeek':
                            scheduleObj.currentView = isTimelineView ? 'TimelineWeek' : 'Week';
                            break;
                        case 'WorkWeek':
                        case 'TimelineWorkWeek':
                            scheduleObj.currentView = isTimelineView ? 'TimelineWorkWeek' : 'WorkWeek';
                            break;
                        case 'Month':
                        case 'TimelineMonth':
                            scheduleObj.currentView = isTimelineView ? 'TimelineMonth' : 'Month';
                            break;
                        case 'Year':
                        case 'TimelineYear':
                            scheduleObj.currentView = isTimelineView ? 'TimelineYear' : 'Year';
                            break;
                        case 'Agenda':
                            scheduleObj.currentView = 'Agenda';
                            break;
                    }
                }
            });
            timelineView.appendTo('#timeline_views');

            var grouping = new ej.buttons.CheckBox({
                checked: true,
                change: function (args) {
                    var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
                    scheduleObj.group.resources = args.checked ? ['Calendars'] : [];
                }
            });
            grouping.appendTo('#grouping');

            var gridlines = new ej.buttons.CheckBox({
                checked: true,
                change: function (args) {
                    var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
                    scheduleObj.timeScale.enable = args.checked;
                }
            });
            gridlines.appendTo('#timeSlots');

            var rowAutoHeight = new ej.buttons.CheckBox({
                checked: false,
                change: function (args) {
                    var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
                    scheduleObj.rowAutoHeight = args.checked;
                }
            });
            rowAutoHeight.appendTo('#row_auto_height');

            document.querySelector('#settingsBtn').onclick = function () {
                var settingsPanel = document.querySelector('.overview-content .right-panel');
                if (settingsPanel.classList.contains('hide')) {
                    ej.base.removeClass([settingsPanel], 'hide');
                    document.querySelector('#workWeekDays').ej2_instances[0].refresh();
                    document.querySelector('#resources').ej2_instances[0].refresh();
                }
                else {
                    ej.base.addClass([settingsPanel], 'hide');
                }
                var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
                scheduleObj.refreshEvents();
            };
        }

        function onExportItemSelect(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            if (args.item.text === 'Excel') {
                var exportDatas = [];
                var eventCollection = scheduleObj.getEvents();
                var resourceCollection = scheduleObj.getResourceCollections();
                var resourceData = resourceCollection[0].dataSource;
                for (var i = 0; i < resourceData.length; i++) {
                    var resource = resourceData[i];
                    var data = eventCollection.filter(function (e) { return e.CalendarId === resource.CalendarId; });
                    exportDatas = exportDatas.concat(data);
                }
                scheduleObj.exportToExcel({
                    exportType: 'xlsx',
                    customData: exportDatas,
                    fields: ['Id', 'Subject', 'StartTime', 'EndTime', 'CalendarId']
                });
            }
            else {
                scheduleObj.exportToICalendar();
            }
        }

        function onToolbarItemClick(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            switch (args.item.text) {
                case 'Day':
                    scheduleObj.currentView = isTimelineView ? 'TimelineDay' : 'Day';
                    break;
                case 'Week':
                    scheduleObj.currentView = isTimelineView ? 'TimelineWeek' : 'Week';
                    break;
                case 'WorkWeek':
                    scheduleObj.currentView = isTimelineView ? 'TimelineWorkWeek' : 'WorkWeek';
                    break;
                case 'Month':
                    scheduleObj.currentView = isTimelineView ? 'TimelineMonth' : 'Month';
                    break;
                case 'Year':
                    scheduleObj.currentView = isTimelineView ? 'TimelineYear' : 'Year';
                    break;
                case 'Agenda':
                    scheduleObj.currentView = 'Agenda';
                    break;
                case 'New Event':
                    var date = scheduleObj.selectedDate;
                    var eventData = {
                        Id: scheduleObj.getEventMaxID(),
                        Subject: '',
                        StartTime: new Date(date.getFullYear(), date.getMonth(), date.getDate(), new Date().getHours(), 0, 0),
                        EndTime: new Date(date.getFullYear(), date.getMonth(), date.getDate(), new Date().getHours() + 1, 0, 0),
                        Location: '',
                        Description: '',
                        IsAllDay: false,
                        CalendarId: 1
                    };
                    scheduleObj.openEditor(eventData, 'Add', true);
                    break;
                case 'New Recurring Event':
                    var dates = scheduleObj.selectedDate;
                    var recEventData = {
                        Id: scheduleObj.getEventMaxID(),
                        Subject: '',
                        StartTime: new Date(dates.getFullYear(), dates.getMonth(), dates.getDate(), new Date().getHours(), 0, 0),
                        EndTime: new Date(dates.getFullYear(), dates.getMonth(), dates.getDate(), new Date().getHours() + 1, 0, 0),
                        Location: '',
                        Description: '',
                        IsAllDay: false,
                        CalendarId: 1
                    };
                    scheduleObj.openEditor(recEventData, 'Add', true, 1);
                    break;
            }
        }

        function onWeekFirstDayChange(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            scheduleObj.firstDayOfWeek = args.value;
        }

        function onWeekDaysChange(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            scheduleObj.workDays = args.value;
        }

        function onCalendarChange(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            var resourcePredicate;
            for (var i = 0, a = args.value; i < a.length; i++) {
                var value = a[i];
                if (resourcePredicate) {
                    resourcePredicate = resourcePredicate.or(new ej.data.Predicate('CalendarId', 'equal', value));
                }
                else {
                    resourcePredicate = new ej.data.Predicate('CalendarId', 'equal', value);
                }
            }
            scheduleObj.resources[0].query = resourcePredicate ? new ej.data.Query().where(resourcePredicate) :
                new ej.data.Query().where('CalendarId', 'equal', 1);
        }

        function onTimezoneChange(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            scheduleObj.timezone = args.value;
            updateLiveTime();
            document.querySelector('.schedule-overview #timezoneBtn').innerHTML =
                '<span class="e-btn-icon e-icons e-time-zone e-icon-left"></span>' + args.itemData.text;
        }

        function onDayStartHourChange(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            scheduleObj.startHour = new ej.base.Internationalization().formatDate(args.value, { skeleton: 'Hm' });
        }

        function onDayEndHourChange(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            scheduleObj.endHour = new ej.base.Internationalization().formatDate(args.value, { skeleton: 'Hm' });
        }

        function onWorkStartHourChange(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            scheduleObj.workHours.start = new ej.base.Internationalization().formatDate(args.value, { skeleton: 'Hm' });
        }

        function onWorkEndHourChange(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            scheduleObj.workHours.end = new ej.base.Internationalization().formatDate(args.value, { skeleton: 'Hm' });
        }

        function onSlotIntervalChange(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            scheduleObj.timeScale.interval = args.value;
        }

        function onSlotCountChange(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            scheduleObj.timeScale.slotCount = args.value;
        }

        function onTimeFormatChange(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            scheduleObj.timeFormat = args.value;
        }

        function onWeekNumberChange(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            if (args.value === 'Off') {
                 scheduleObj.showWeekNumber = false;
            } else {
                scheduleObj.showWeekNumber = true;
                scheduleObj.weekRule = args.value;
            }
        }
        function onTooltipChange(args) {
            var scheduleObj = document.getElementById('scheduler').ej2_instances[0];
            if (args.value === 'Off') {
                  scheduleObj.eventSettings.enableTooltip = false;
            } else {
                scheduleObj.eventSettings.enableTooltip = true;
            }
        }
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>This <a href="https://www.syncfusion.com/aspnet-core-ui-controls/scheduler" target="_blank">ASP.NET Core Scheduler example </a> demonstrates the overview of ASP.NET Corex Scheduler with its overall features. Use the toolbar buttons to play with Scheduler functionalities.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            The ASP.NET Core Scheduler is a fully-features calendar component that is used to manage appointments with multiple resources.
            The data can be pulled from the <code>DataManager</code> component or <code>IEnumerable</code> of objects or Restful web services and bind the data fields using <code>EventSettings.Field</code>.

        </p>
        <p>
            In this demo, ASP.NET Core Scheduler features such as Multiple views, Templates (Date Header, Quick Info), Resources, Grouping, Timezone, Timescale, etc... are used along with multiple resources.
        </p>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Overview in ASP.NET Core Scheduler control. Explore here for more details."/>
                }


@section Title{
                    <title>ASP.NET Core Scheduler Overview Example - Syncfusion Demos </title> 
                }

@section Header{
                    <h1 class='sb-sample-text'>Example of Overview in ASP.NET Core Scheduler Control</h1>
                }
