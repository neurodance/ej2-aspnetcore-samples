@using Syncfusion.EJ2.Gantt;
@section ControlsSection{
   
    <div class="control-section">
        <div class="row">
            <div class="col-md-12">
                <ejs-gantt id='RemoteData' treeColumnIndex="1" height="450px" allowSelection="true" highlightWeekends="true"
                           includeWeekend="true" projectStartDate="02/24/2021"
                           projectEndDate="06/10/2021" gridLines="Both">
                    <e-data-manager url="https://ej2services.syncfusion.com/production/web-services/api/GanttData" adaptor="WebApiAdaptor" crossDomain="true"></e-data-manager>
                    <e-gantt-taskfields id="TaskId" name="TaskName" startDate="StartDate"
                         duration="Duration" progress="Progress" dependency="Predecessor" child="SubTasks">
                    </e-gantt-taskfields>
                    <e-gantt-columns>
                        <e-gantt-column field="TaskId" visible="false"></e-gantt-column>
                        <e-gantt-column field="TaskName" headerText="Task Name" width="250" clipMode="EllipsisWithTooltip"></e-gantt-column>
                        <e-gantt-column field="StartDate"></e-gantt-column>
                        <e-gantt-column field="Duration"></e-gantt-column>
                    </e-gantt-columns>
                    <e-gantt-timelinesettings timelineUnitSize="50">
                        <e-timelinesettings-toptier unit="Month" format="MMM dd, y"></e-timelinesettings-toptier>
                        <e-timelinesettings-bottomtier unit="Day" formatter=@("formatter")></e-timelinesettings-bottomtier>
                    </e-gantt-timelinesettings>
                    <e-gantt-labelsettings leftLabel="TaskName"></e-gantt-labelsettings>
                </ejs-gantt>
            </div>
        </div>
    </div>
    <script>
        var formatter = function (date) {
            var month = date.getMonth();
            if (month === 1) {
                return '';
            } else {
                var presentDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
                var start = new Date(presentDate.getFullYear(), 0, 0);
                var diff = Number(presentDate) - Number(start);
                var oneDay = 1000 * 60 * 60 * 24;
                var day = Math.floor(diff / oneDay);
                return 'day ' + (day - 59);
            }
        }

    </script>

}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the way of binding data to Gantt chart with a remote service. The Gantt chart data source is bound to remote data using the DataManager. The data in this sample shows the various phases of barley harvesting.
        </p>
    </div>
}
@section Description{

    <div id="description">
        <p>
            The <code>dataSource</code> property in Gantt chart can be assigned with the instance of
            <code>DataManager</code> to bind remote data.
            The DataManager, which will act as an interface between the service endpoint and the Gantt chart, will require
            the below minimal information to interact with service endpoint properly.
            <ol>
                <li><code>DataManager->url</code> - Defines the service endpoint to fetch data.</li>
                <li>
                    <code>DataManager->adaptor</code> - Defines the adaptor option. By default, ODataAdaptor is used for remote
                    binding.
                </li>
                Adaptor is responsible for processing response and request from/to the service endpoint.
                Adaptors are designed to interact with particular service endpoints. They
                are,
                <li>
                    <code>UrlAdaptor</code> - Use this to interact with any remote services. This is the base adaptor for all remote
                    based adaptors.
                </li>
                <li><code>ODataAdaptor</code> - Use this to interact with OData endpoints.</li>
                <li><code>ODataV4Adaptor</code> - Use this to interact with OData V4 endpoints.</li>
                <li><code>WebApiAdaptor</code> - Use this to interact with Web API created under OData standards.</li>
                <li><code>WebMethodAdaptor</code> - Use this to interact with web methods.</li>
                In this demo, remote data is bound by assigning service data as an instance of
                <code>DataManager</code> to the
                <code>dataSource</code>
                property.
                More information on the data binding can be found in this documentation section.
            </ol>
        </p>
    </div>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Remote Data in ASP.NET Core Gantt control. Explore here for more details."/>
                }
@section Title{
                    <title>ASP.NET Core Gantt Remote Data Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Remote Data in ASP.NET Core Gantt Control</h1>
                }
