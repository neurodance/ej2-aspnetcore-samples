@using Syncfusion.EJ2.PivotView
@section Meta{
                    <meta name="description" content="This example demonstrates the External binding in ASP.NET Core Pivot Table control. Explore here for more details."/>
                }
@section ControlsSection{

    <div class="control-section" style="overflow:auto">
        <div class="content-wrapper">
            <ejs-pivotview id="pivotview" width="100%" height="300" load="onLoad" dataBound="onDataBound" cellSelected="onCellSelected" showTooltip="false">
                <e-datasourcesettings dataSource="@ViewBag.data" expandAll="true" enableSorting="true">
                    <e-rows>
                        <e-field name="Country"></e-field>
                        <e-field name="Products"></e-field>
                    </e-rows>
                    <e-columns>
                        <e-field name="Year"></e-field>
                        <e-field name="Order_Source" caption="Order Source"></e-field>
                    </e-columns>
                    <e-values>                        
                        <e-field name="Sold" caption="Units Sold"></e-field>
                    </e-values>
                    <e-filters>
                        <e-field name="Product_Categories" caption="Product Categories"></e-field>
                    </e-filters>
                    <e-formatsettings>
                        <e-field name="Sold" format="N0"></e-field>
                    </e-formatsettings>
                </e-datasourcesettings>
                <e-gridSettings columnWidth="120" allowSelection= "true">                    
                </e-gridSettings>
            </ejs-pivotview>
        </div>
        <br />
        <br />
        <div id="heatmap" style="height: 450px;"></div>        
    </div>
 
    <script>
        var onInit = true;
        var selectedCells;
        var heatmap;
        var measureList = {};
        var xLabels = [];
        var yLabels = [];
        var jsonDataSource = [];
        function onDataBound(args) {
            if (onInit) {
                var pivotObj = document.getElementById('pivotview').ej2_instances[0];
                pivotObj.grid.selectionModule.selectCellsByRange({ cellIndex: 1, rowIndex: 1 }, { cellIndex: 3, rowIndex: 4 });
            }
        }

        function onCellSelected(args) {
            selectedCells = args.selectedCellsInfo;
            if (selectedCells && selectedCells.length > 0) {
                frameSeries();
                heatmapUpdate();
            }
        }

        function onLoad() {
            if (onInit) {
                var pivotObj = document.getElementById('pivotview').ej2_instances[0];
                pivotObj.gridSettings.selectionSettings= { mode: 'Cell', type: 'Multiple', cellSelectionMode: 'Box' };
            }
        }

    function frameSeries() {
        var pivotObj = document.getElementById('pivotview').ej2_instances[0]; 
        xLabels = [];
        yLabels = [];
        jsonDataSource = [];
        var columnGroupObject = {};
        var cellCount = 0;
        while (cellCount < selectedCells.length) {
            var sCell = selectedCells[cellCount];
            var sColumnSeries = (pivotObj.dataSourceSettings.values.length > 1 && measureList[sCell.measure]) ?
                (sCell.columnHeaders.toString() + ' ~ ' + measureList[sCell.measure]) : sCell.columnHeaders.toString();
            sColumnSeries = sColumnSeries == '' && sCell.measure != '' ? 'Grand Total' : sColumnSeries;
            var rHeaders = sCell.rowHeaders == '' && sCell.currentCell.axis != 'column' ? 'Grand Total' : sCell.rowHeaders;
            if (rHeaders != '' && sColumnSeries) {
                if (columnGroupObject[sColumnSeries]) {
                    columnGroupObject[sColumnSeries].push({ x: rHeaders.toString(), y: Number(sCell.value) });
                } else {
                    columnGroupObject[sColumnSeries] = [{ x: rHeaders.toString(), y: Number(sCell.value) }];
                    yLabels.push(sColumnSeries);
                }
                if (xLabels.indexOf(rHeaders.toString()) == -1) {
                    xLabels.push(rHeaders.toString());
                }
            }
            cellCount++;
        }
        for (var xcnt = 0; xcnt < xLabels.length; xcnt++) {
            var xName = xLabels[xcnt];
            var row = { 'xMember': xName };
            for (var ycnt = 0; ycnt < yLabels.length; ycnt++) {
                var YName = yLabels[ycnt];
                var col = columnGroupObject[YName].filter(function (item) { return item.x == xLabels[xcnt]; });
                row[YName] = col.length > 0 ? col[0].y : '';
            }
            jsonDataSource.push(row);
        }
    }

    function heatmapUpdate() {
        var pivotObj = document.getElementById('pivotview').ej2_instances[0]; 
        if (onInit) {
            onInit = false;
            heatmap = new ej.heatmap.HeatMap({
                titleSettings: {
                    text: 'Sales Analysis'
                },
                legendSettings: {
                    visible: false,
                    position: 'Top'
                },
                xAxis: {
                    title: { text: pivotObj.dataSourceSettings.rows.map(function (args) { return args.caption || args.name; }).join(' ~ ') },
                    labels: xLabels,
                    labelIntersectAction: "Trim"
                },
                yAxis: {
                    title: { text: pivotObj.dataSourceSettings.values.map(function (args) { return args.caption || args.name; }).join(' ~ ') },
                    labels: yLabels
                },
                dataSource: jsonDataSource,
                dataSourceSettings: {
                    isJsonData: true,
                    adaptorType: 'Table',
                    xDataMapping: 'xMember'
                },
                load: function (args) {
                    var selectedTheme = location.hash.split('/')[1];
                    selectedTheme = selectedTheme ? selectedTheme : 'Material';
                    args.heatmap.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i,Â 'Contrast');
                },
            }, '#heatmap');
        } else {
            heatmap.dataSource = jsonDataSource;
            heatmap.xAxis = {
                title: { text: pivotObj.dataSourceSettings.rows.map(function (args) { return args.caption || args.name; }).join(' ~ ') },
                labels: xLabels,
                labelIntersectAction: "Trim" 
            };
            heatmap.yAxis = {
                title: { text: pivotObj.dataSourceSettings.values.map(function (args) { return args.caption || args.name; }).join(' ~ ') },
                labels: yLabels
            };
            heatmap.refresh();
        }
    }   
    </script>
}

@section PreScripts {
    <script>
        ej.base.enableRipple(false);
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates rendering HeatMap control by providing desired data from a pivot table on selection. Not only HeatMap, but any other control (including third party) can be used for this purpose.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            In this sample, the cell-selection feature is enabled with the help of the
            <code>allowSelection</code> property and its type and mode are configured using the
            <code>selectionSettings</code> property.
            The <code>cellSelected</code> event gets fired on every selection operation performed in the pivot table.
            This event returns the selected cell information, like row header name, column header name, measure name, and value.
            Based on this information, the HeatMap will be plotted.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET Core Pivot Table External binding Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of External binding in ASP.NET Core Pivot Table Control</h1>
                }