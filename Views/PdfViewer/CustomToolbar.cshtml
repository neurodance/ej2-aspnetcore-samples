@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Navigations;
@{
    var template = "<div class=''><span class='e-pv-total-page-number' id='totalPage'>of 0</span></div>";
    var inputtemplate = "<div class=''><input type='text' class='e-input-group e-pv-current-page-number' id='currentPage' /></div>";
    string menu = "#stamp-menu";
}
@{
    List<MenuItem> menuItems = new List<MenuItem>(){
       new MenuItem
       {
        IconCss = "e-icons e-stamp",
        Items = new List<MenuItem>()
        {
            new MenuItem
            {
                Text = "Dynamic",
                Items = new List<MenuItem>
                {
                    new MenuItem { Text = "Revised", Id = "Dynamic" },
                    new MenuItem { Text = "Reviewed", Id = "Dynamic" },
                    new MenuItem { Text = "Received", Id = "Dynamic" },
                    new MenuItem { Text = "Confidential", Id = "Dynamic" },
                    new MenuItem { Text = "Approved", Id = "Dynamic" },
                    new MenuItem { Text = "Not Approved", Id = "Dynamic" }
                }
            },
            new MenuItem
            {
                Text = "Sign Here",
                Items = new List<MenuItem>
                {
                    new MenuItem { Text = "Witness", Id = "Sign Here" },
                    new MenuItem { Text = "Initial Here", Id = "Sign Here" },
                    new MenuItem { Text = "Sign Here", Id = "Sign Here" },
                    new MenuItem { Text = "Accepted", Id = "Sign Here" },
                    new MenuItem { Text = "Rejected", Id = "Sign Here" }
                }
            },
            new MenuItem
            {
                Text = "Standard Business",
                Items = new List<MenuItem>
                {
                    new MenuItem { Text = "Approved", Id = "Standard Business" },
                    new MenuItem { Text = "Not Approved", Id = "Standard Business" },
                    new MenuItem { Text = "Draft", Id = "Standard Business" },
                    new MenuItem { Text = "Final", Id = "Standard Business" },
                    new MenuItem { Text = "Completed", Id = "Standard Business" },
                    new MenuItem { Text = "Confidential", Id = "Standard Business" },
                    new MenuItem { Text = "For Public Release", Id = "Standard Business" },
                    new MenuItem { Text = "Not For Public Release", Id = "Standard Business" },
                    new MenuItem { Text = "For Comment", Id = "Standard Business" },
                    new MenuItem { Text = "Void", Id = "Standard Business" },
                    new MenuItem { Text = "Preliminary Results", Id = "Standard Business" },
                    new MenuItem { Text = "Information Only", Id = "Standard Business" }
                }
            }
        }
       }
    };
}
@section ControlsSection{
    <link href="~/styles/pdf-viewer/custom-toolbar.css" rel="stylesheet" />
    <script src="~/scripts/pdf-viewer/custom-toolbar.js"></script>
    <div class="control-section">
        @Html.Partial("_SwitchPartial")
        <ejs-toolbar id="topToolbar" height="56px">
            <e-toolbar-items>
                <e-toolbar-item prefixIcon="e-icons e-folder" tooltipText="Open" align="Left" click="openPage" id="Openpage"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-icons e-save" tooltipText="Save" click="downloadClicked"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-icons e-chevron-left" tooltipText="Previous Page" align="Center" click="previousClicked" id="previousPage"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-icons e-chevron-right" tooltipText="Next Page" align="Center" click="nextClicked" id="nextPage"></e-toolbar-item>
                <e-toolbar-item template="@inputtemplate" tooltipText="Page Number" type="Input" align="Center"></e-toolbar-item>
                <e-toolbar-item template="@template" align="Center" tooltipText="Page Number"></e-toolbar-item>
                <e-toolbar-item type="Separator" tooltipText="separator" align="Center"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-icons e-mouse-pointer" tooltipText="Text Selection Tool" showTextOn="Overflow" align="Center" click="textSelection"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-icons e-pan" tooltipText="Pan Mode" showTextOn="Overflow" align="Center" click="panMode"></e-toolbar-item>
                <e-toolbar-item type="Separator" tooltipText="separator" align="Center"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-icons e-annotation-edit" tooltipText="Edit Annotations" align="Center" showTextOn="Overflow" click="openEditAnnotation"></e-toolbar-item>
                <e-toolbar-item type="Separator" align="Center" tooltipText="separator"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-icons e-split-vertical" tooltipText="Add and Edit Form Fields" align="Center" showTextOn="Overflow" click="addEditFormFields"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-icons e-search" tooltipText="Search" align="Right" click="findText"></e-toolbar-item>
                <e-toolbar-item prefixIcon="e-icons e-print" tooltipText="Print" align="Right" click="printClicked"></e-toolbar-item>
            </e-toolbar-items>
        </ejs-toolbar>
        <div id="editAnnotationToolbar" style="display:none">
            <ejs-toolbar id="edittoolbar" height="56px">
                <e-toolbar-items>
                    <e-toolbar-item prefixIcon="e-icons e-highlight-color" click='highlight' tooltipText="Highlight" id="highlight" align="Center"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-underline" click='underLine' tooltipText="Underline" id="underline" align="Center"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-strikethrough" click='strikeThrough' tooltipText="Strikethrough" id="strikethrough" align="Center"></e-toolbar-item>
                    <e-toolbar-item type="Separator" tooltipText="separator" align="Center"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-line" click='addLine' tooltipText="Add Line" id="line" align="Center"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-arrow-right-up" click='addArrow' tooltipText="Add Arrow" id="arrow" align="Center"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-rectangle" click='addRectangle' tooltipText="Add Rectangle" id="rectangle" align="Center"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-circle" click='addCircle' tooltipText="Add Circle" id="circle" align="Center"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-pentagon" click='addPoligon' tooltipText="Add Polygon" id="polygon" align="Center"></e-toolbar-item>
                    <e-toolbar-item type="Separator" tooltipText="separator" align="Center"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-length" click='distance' tooltipText="Calibrate Distance" id="calibrate_distance" align="Center"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-perimeter" click='perimeter' tooltipText="Calibrate Perimeter" id="calibrate_perimeter" align="Center"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-area" click='area' tooltipText="Calibrate Area" id="calibrate_area" align="Center"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-radius" click='radius' tooltipText="Calibrate Radius" id="calibrate_radius" align="Center"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-volume" click='volume' tooltipText="Calibrate Volume" id="calibrate_volume" align="Center"></e-toolbar-item>
                    <e-toolbar-item type="Separator" tooltipText="separator" align="Center"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-text-annotation" click='freeText' tooltipText="Free Text" id="freeText" align="Center"></e-toolbar-item>
                    <e-toolbar-item type="Separator" tooltipText="separator" align="Center"></e-toolbar-item>
                    <e-toolbar-item template="@menu" tooltipText="Add Stamp" id="stamp" align="Center"></e-toolbar-item>
                    <e-toolbar-item type="Separator" tooltipText="separator" align="Center"></e-toolbar-item>
                    <e-toolbar-item id="signature" prefixIcon="e-icons e-signature" style="border:none;background:transparent;" click='addSign1' tooltipText="Add Signature" align="Center"></e-toolbar-item>
                    <e-toolbar-item type="Separator" tooltipText="separator" align="Center"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-style" click='ink' id="ink" align="Center"></e-toolbar-item>
                </e-toolbar-items>
            </ejs-toolbar>
        </div>
        <div>
            <div id="SignatureToolbar" style="display:none">
                <div class="e-dropdown-popup" id="container_annotation_signature-popup" style="z-index:111" data-ripple="true">
                    <ul role="menu" tabindex="0">
                        <li id="e-dropdown-btn-item_63" role="menuitem" tabindex="-1" aria-label="ADD SIGNATURE" style="width: 206px; display: flex; flex-direction: column; height: auto; align-items: center; background: transparent; cursor: pointer;" onclick="onSignatureClick(this)">
                            <button class="e-control e-btn e-lib e-outline e-primary" style="width: auto; height: 36px;">Add Signature</button>
                        </li>
                        <li class="e-separator" id="e-dropdown-btn-item_64" role="menuitem" tabindex="-1" aria-label="separator" style="margin: 8px 0;"></li>
                        <li id="e-dropdown-btn-item_65" role="menuitem" tabindex="-1" aria-label="ADD INITIAL" style="width: 206px; display: flex; flex-direction: column; height: auto; align-items: center; background: transparent; cursor: pointer;" onclick="onSignatureClick(this)">
                            <button class="e-control e-btn e-lib e-outline e-primary" style="width: auto; height: 36px;">Add Initial</button>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div id="formFieldToolbar" style="display:none">
            <ejs-toolbar id="formtoolbar" height="56px">
                <e-toolbar-items>
                    <e-toolbar-item id="textbox" prefixIcon="e-icons e-text-form" click='textBox' tooltipText="Textbox" align="Center"></e-toolbar-item>
                    <e-toolbar-item id="password" prefixIcon="e-icons e-password" click='passWord' tooltipText="Password" align="Center"></e-toolbar-item>
                    <e-toolbar-item id="checkbox" prefixIcon="e-icons e-check-box" click='checkBox' tooltipText="Checkbok" align="Center"></e-toolbar-item>
                    <e-toolbar-item id="radio_button" prefixIcon="e-icons e-radio-button" click='radioButton' tooltipText="Radio Button" align="Center"></e-toolbar-item>
                    <e-toolbar-item id="drop_down" prefixIcon="e-icons e-drop-down" click='dropDown' tooltipText="Drop Down" align="Center"></e-toolbar-item>
                    <e-toolbar-item id="list_box" prefixIcon="e-pv-listbox-icon" click='listBox' tooltipText="List Box" align="Center"></e-toolbar-item>
                    <e-toolbar-item id="formField_signature" prefixIcon="e-icons e-signature" style="border:none;background:transparent;" click='addSign' tooltipText="Add Signature" align="Center"></e-toolbar-item>
                    <e-toolbar-item id="separator" type="Separator" tooltipText="separator" align="Center"></e-toolbar-item>
                </e-toolbar-items>
            </ejs-toolbar>
        </div>
        <div id="textSearchToolbar" style="display:none">
            <div class="e-pv-search-bar" id="container_search_box" style="top:113px;right:0px;z-index:1111">
                <div class="e-pv-search-bar-elements" id="container_search_box_elements" style="width:330px">
                    <div class="e-input-group e-pv-search-input" id="container_search_input_container">
                        <input class="e-input" id="container_search_input" type="text" placeholder="Find in document" onkeypress="searchInputKeypressed(event)" />
                        <span class="e-input-group-icon e-input-search-group-icon e-icons e-search" id="container_search_box-icon" onclick="initiateTextSearch()"></span>
                        <span class="e-input-group-icon e-input-search-group-icon e-icons e-close" id="container_close_search_box-icon" style="display: none;" onclick="clearTextSearch()"></span>
                    </div>
                    <button class=" e-icon-btn e-pv-search-btn e-icons e-chevron-left" id="container_prev_occurrence" type="button" onclick="previousTextSearch()" style="border: none; width: 28px; height: 17px; background: white;" aria-label="Previous Search text">
                    </button>
                    <button class="e-icon-btn e-pv-search-btn e-icons e-chevron-right" id="container_next_occurrence" type="button" onclick="nextTextSearch()" style="border: none; width: 28px; height: 17px; background: white;" aria-label="Next Search text">
                    </button>
                </div>
                <div class="e-pv-match-case-container" id="container_match_case_container">
                    <div class="e-checkbox-wrapper e-wrapper e-pv-match-case">
                        <label for="container_match_case">
                            <input id="container_match_case" type="checkbox" class="e-control e-checkbox e-lib" onclick="checkBoxChanged(event)" />
                            <span class="e-ripple-container" data-ripple="true"></span>
                            <span id="checkboxSpan" class="e-icons e-frame"></span>
                            <span class="e-label">Match case</span>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div id="stamp-menu">
            <ejs-menu id='menu' showItemOnClick='true' items='menuItems' select='select'></ejs-menu>
        </div>
        <ejs-pdfviewer id="pdfviewer"
                   style="height:641px"
                   enableToolbar="false"
                   enableAnnotationToolbar ="false"
                   enableNavigationToolbar="false"
                   documentPath="https://cdn.syncfusion.com/content/pdf/hive-succinctly.pdf"
                   resourceUrl="https://cdn.syncfusion.com/ej2/23.2.6/dist/ej2-pdfviewer-lib"
                   documentLoad="documentLoaded"
                   enableCommentPanel="false"
                   pageChange="pageChanged">
        </ejs-pdfviewer>
        <input type="file" id="fileUpload" accept=".pdf" style="display:block;visibility:hidden;width:0;height:0;">
        <div id="magnificationToolbarItems">
            <ejs-toolbar id="magnificationToolbar">
                <e-toolbar-items id="magnificationToolbarItems">
                    <e-toolbar-item prefixIcon="e-pv-fit-page" tooltipText="Fit to page" click="pageFitClicked"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-circle-add" tooltipText="Zoom in" click="zoomInClicked"></e-toolbar-item>
                    <e-toolbar-item prefixIcon="e-icons e-circle-remove" tooltipText="Zoom out" click="zoomOutClicked"></e-toolbar-item>
                </e-toolbar-items>
            </ejs-toolbar>
        </div>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Custom Toolbar in ASP.NET Core PDF Viewer control. Explore here for more details."/>
                }

@section ActionDescription{
    <div id="action-description">
        <p>This example illustrates the process of crafting a customized toolbar within the PDF Viewer, allowing you to incorporate specific tools tailored to your needs.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            This sample demonstrate how to perform the PDF Viewer core functionalities using a custom toolbar. In this example, you can see PDF Viewer control API in action to perform the functionalities.
        </p>
        <ul>
           <li>Load document - <code>viewer.load(fileName, password)</code></li>
            <li>Save - <code>viewer.download()</code></li>
            <li>Go to Previous Page - <code>viewer.navigation.goToPreviousPage()</code></li>
            <li>Go to Next Page - <code>viewer.navigation.goToNextPage()</code></li>
            <li>Go to Page - <code>viewer.navigation.goToPage(pageindex)</code></li>
            <li>TextSelection  - <code>textSelection()</code></li>
            <li>Pan  - <code>panMode()</code></li>
            <li>Annotation Edit - <code>openEditAnntation()</code></li>
            <li>FormFields Edit - <code>addEditFormFields()</code></li>
            <li>Search Text - <code>viewer.textSearch.searchText(searchText,isMatchCase)</code></li>
            <li>Search Next - <code>viewer.textSearch.searchNext()</code></li>
            <li>Search Previous - <code>viewer.textSearch.searchPrevious()</code></li>
            <li>Cancel Search Text - <code>viewer.textSearch.cancelTextSearch()</code></li>
            <li>Print - <code>viewer.print.print()</code></li>
            <li>Fit To Page - <code>viewer.magnification.fitToPage()</code></li>
            <li>Zoom In - <code>viewer.magnification.zoomIn()</code></li>
            <li>Zoom Out - <code>viewer.magnification.zoomOut()</code></li>
        </ul>
        <p>
            More information on the PDF Viewer instantiation can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/pdfviewer/getting-started/">
                documentation section
            </a>.
        </p>
    </div>
}
<style>
    /* custom code start*/
    #pdfviewer {
        height: 640px;
    }

    #magnificationToolbar {
        background: transparent;
        height: auto;
        min-height: 56px;
        width: auto;
        border: none;
        position: absolute;
        z-index: 900;
        top: calc(100% - 140px);
        left: calc(100% - 150px);
        transform: rotate(90deg);
    }

    div#magnificationToolbar.e-toolbar .e-toolbar-items {
        background: transparent;
        padding: 2px 3px 2px 2px;
    }

    #magnificationToolbar.e-toolbar .e-tbar-btn {
        border-radius: 50%;
        min-height: 30px;
        min-width: 30px;
        border: 1px solid #c8c8c8;
    }

    #customToolbar {
        top: 20px;
        z-index: 900;
    }

    .e-bookmark-popup {
        height: 300px;
        max-width: 300px;
    }

    .e-text-search-popup {
        height: 104px;
        max-width: 348px;
    }

    .e-custom-search-input {
        width: 234px;
    }

    .e-pv-fit-page-icon::before {
        content: '\e91b';
        font-family: "e-icons";
    }

    .e-text-search-popup .e-footer-content,
    .e-bookmark-popup .e-footer-content {
        padding: 0;
        height: 0;
    }

    .search-button,
    .search-button:disabled,
    .search-button:focus,
    .search-button:hover {
        background: transparent;
        box-shadow: none;
    }

    #popup .e-dlg-content {
        padding-left: 0;
        padding-bottom: 0;
    }

    .e-pv-bookmarks {
        min-width: 234px;
    }

    .e-pv-current-page-number {
        width: 46px;
        height: 28px;
        text-align: center;
    }

    .material .e-pv-current-page-number {
        border-width: 1px;
    }

    .e-btn-icon.e-pv-zoom-out-icon.e-icons {
        transform: rotate(90deg);
    }

    .flex-container {
        display: flex;
        justify-content: flex-end;
    }

    .render-mode-info {
        background: none;
        border: none;
        padding-left: 0px;
    }

        .render-mode-info .render-mode-info-icon {
            height: 16px;
            width: 16px;
        }

    .switchLabel {
        font-family: "Segoe UI", "GeezaPro", "DejaVu Serif", sans-serif;
        font-weight: 400;
        line-height: 20px;
        letter-spacing: 0.24px;
        text-align: right;
        font-size: 14px;
    }

    .render-mode-info .render-mode-info-icon::before {
        line-height: 0.5rem;
    }

    .buttonSwitch {
        Width: 40px;
        Height: 24px;
    }
</style>
<script type="text/javascript">
    var currentPageBox
    var matchCase = false;
    var filename;
    var isInkEnabled = false;
    window.onload = function () {
        currentPageBox = document.getElementById('currentPage');
        currentPageBox.value = '1';
        document.getElementById('fileUpload').addEventListener('change', readFile, false);
        currentPageBox.addEventListener('keypress', () => {
            var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
            var currentPage = document.getElementById('currentPage');
            if ((event.which < 48 || event.which > 57) && event.which !== 8 && event.which !== 13) {
                event.preventDefault();
                return false;
            } else {
                var currentPageNumber = parseInt((currentPage).value);
                if (event.which === 13) {
                    if (currentPageNumber > 0 && currentPageNumber <= pdfViewer.pageCount) {
                        pdfViewer.navigation.goToPage(currentPageNumber);
                    } else {
                        (currentPage).value = pdfViewer.currentPageNumber.toString();
                    }
                }
                return true;
            }
        });
    }

    function contentTemplate() {
        return `<ejs-menu id="menu" select="select(event)" items='menuItems'></ejs-menu> `;
    }
    function select(args) {
        disableInkAnnotation();
        var viewer = document.getElementById('pdfviewer').ej2_instances[0];
        var stampId = args.element.id;
        var stampText = args.element.innerText;
        const textSearchToolbarElement = document.getElementById('textSearchToolbar');
        if (textSearchToolbarElement !== null && textSearchToolbarElement.style.display === 'block') {
            textSearchToolbarElement.style.display = 'none';
        }

        const signatureToolbarElement = document.getElementById('SignatureToolbar');
        if (signatureToolbarElement !== null && signatureToolbarElement.style.display === 'block') {
            signatureToolbarElement.style.display = 'none';
        }

        const formFieldToolbarElement = document.getElementById('formFieldToolbar');
        if (formFieldToolbarElement !== null && formFieldToolbarElement.style.display === 'block') {
            formFieldToolbarElement.style.display = 'none';
            viewer.designerMode = false;
        }
        if (stampId === 'Dynamic' && stampText != null) {
            if (stampText === 'Revised') {
                viewer.annotation.setAnnotationMode("Stamp", "Revised");
            }
            else if (stampText == "Reviewed") {
                viewer.annotation.setAnnotationMode("Stamp", "Reviewed");
            }
            else if (stampText == "Received") {
                viewer.annotation.setAnnotationMode("Stamp", "Received");
            }
            else if (stampText == "Confidential") {
                viewer.annotation.setAnnotationMode("Stamp", "Confidential");
            }
            else if (stampText == "Approved") {
                viewer.annotation.setAnnotationMode("Stamp", "Approved");
            }
            else if (stampText == "Not Approved") {
                viewer.annotation.setAnnotationMode("Stamp", "NotApproved");
            }
        }
        if (stampId === 'Sign Here' && stampText != null) {
            if (stampText === 'Witness') {
                viewer.annotation.setAnnotationMode("Stamp", undefined, "Witness");
            }
            else if (stampText == "Initial Here") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, "InitialHere");
            }
            else if (stampText == "Sign Here") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, "SignHere");
            }
            else if (stampText == "Accepted") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, "Accepted");
            }
            else if (stampText == "Rejected") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, "Rejected");
            }
        }
        if (stampId === 'Standard Business' && stampText != null) {
            if (stampText === 'Approved') {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "Approved");
            }
            else if (stampText == "Not Approved") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "NotApproved");
            }
            else if (stampText == "Draft") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "Draft");
            }
            else if (stampText == "Final") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "Final");
            }
            else if (stampText == "Completed") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "Completed");
            }
            else if (stampText == "Confidential") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "Confidential");
            }
            else if (stampText == "For Public Release") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "ForPublicRelease");
            }
            else if (stampText == "Not For Public Release") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "NotForPublicRelease");
            }
            else if (stampText == "For Comment") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "ForComment");
            }
            else if (stampText == "Void") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "Void");
            }
            else if (stampText == "Preliminary Results") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "PreliminaryResults");
            }
            else if (stampText == "Information Only") {
                viewer.annotation.setAnnotationMode("Stamp", undefined, undefined, "InformationOnly");
            }
        }

    }
    function openPage() {
        disableInkAnnotation();
        document.getElementById('fileUpload').click();
    }
    function readFile(evt) {
        var upoadedFiles = evt.target.files;
        var uploadedFile = upoadedFiles[0];
        filename = upoadedFiles[0].name;
        var reader = new FileReader();
        reader.readAsDataURL(uploadedFile);
        reader.onload = function () {
            var obj = document.getElementById('pdfviewer').ej2_instances[0];
            var uploadedFileUrl = pdfViewerresult;
            obj.load(uploadedFileUrl, null);
            obj.fileName = filename;
            currentPageBox = document.getElementById('currentPage');
            currentPageBox.value = '1';
            var pageCount = document.getElementById('totalPage');
            pageCount.textContent = 'of ' + obj.pageCount;
        }
    }
    function pageChanged() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        document.getElementById('currentPage').value = pdfViewer.currentPageNumber;
        updatePageNavigation();
    }
    function onCurrentPageBoxKeypress(event) {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        var currentPageBox = document.getElementById('currentPage');
        if ((event.which < 48 || event.which > 57) && event.which !== 8 && event.which !== 13) {
            event.preventDefault();
            return false;
        }
        else {
            var currentPageNumber = parseInt(currentPageBox.value);
            if (event.which === 13) {
                if (currentPageNumber > 0 && currentPageNumber <= viewer.pageCount) {
                    pdfViewer.navigation.goToPage(currentPageNumber);
                }
                else {
                    currentPageBox.value = viewer.currentPageNumber.toString();
                }
            }
            return true;
        }
    }

    function currentPageClicked() {
        var currentPage = document.getElementById('currentPage');
        (currentPage).select();
    }
    function documentLoaded() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        var pageCount = document.getElementById('totalPage');
        pageCount.textContent = 'of ' + pdfViewer.pageCount;
        updatePageNavigation();
    }
    function updatePageNavigation() {
        var toolbarObj = document.getElementById('topToolbar').ej2_instances[0];
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.currentPageNumber === 1) {
            toolbarObj.enableItems(document.getElementById('previousPage'), false);
            toolbarObj.enableItems(document.getElementById('nextPage'), true);
        } else if (pdfViewer.currentPageNumber === pdfViewer.pageCount) {
            toolbarObj.enableItems(document.getElementById('previousPage'), true);
            toolbarObj.enableItems(document.getElementById('nextPage'), false);
        } else {
            toolbarObj.enableItems(document.getElementById('previousPage'), true);
            toolbarObj.enableItems(document.getElementById('nextPage'), true);
        }
    }
    function previousClicked() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.navigation.goToPreviousPage();
    }
    function nextClicked() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.navigation.goToNextPage();
    }
    function textSelection() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.interactionMode = 'TextSelection';
        pdfViewer.enableTextSelection = true;

        const editAnnotationToolbarElement = document.getElementById('editAnnotationToolbar');
        if (editAnnotationToolbarElement?.style.display === 'block') {
            editAnnotationToolbarElement.style.display = 'none';
        }

        const textSearchToolbarElement = document.getElementById('textSearchToolbar');
        if (textSearchToolbarElement?.style.display === 'block') {
            textSearchToolbarElement.style.display = 'none';
        }

        const signatureToolbarElement = document.getElementById('SignatureToolbar');
        if (signatureToolbarElement?.style.display === 'block') {
            signatureToolbarElement.style.display = 'none';
        }

        const formFieldToolbarElement = document.getElementById('formFieldToolbar');
        if (formFieldToolbarElement?.style.display === 'block') {
            formFieldToolbarElement.style.display = 'none';
            pdfViewer.designerMode = false;
        }
    }

    function panMode() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.interactionMode = 'Pan';
        pdfViewer.enablePanMode = true;

        const editAnnotationToolbarElement = document.getElementById('editAnnotationToolbar');
        if (editAnnotationToolbarElement?.style.display === 'block') {
            editAnnotationToolbarElement.style.display = 'none';
        }

        const textSearchToolbarElement = document.getElementById('textSearchToolbar');
        if (textSearchToolbarElement?.style.display === 'block') {
            textSearchToolbarElement.style.display = 'none';
        }

        const signatureToolbarElement = document.getElementById('SignatureToolbar');
        if (signatureToolbarElement?.style.display === 'block') {
            signatureToolbarElement.style.display = 'none';
        }

        const formFieldToolbarElement = document.getElementById('formFieldToolbar');
        if (formFieldToolbarElement?.style.display === 'block') {
            formFieldToolbarElement.style.display = 'none';
            pdfViewer.designerMode = false;
        }
    }
    function printClicked() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.print.print();
    }
    function downloadClicked() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.download();
    }
    function pageFitClicked() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.magnification.fitToPage();
    }
    function zoomInClicked() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.magnification.zoomIn();
    }
    function zoomOutClicked() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.magnification.zoomOut();
    }

    function openEditAnnotation() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        const textSearchToolbarElement = document.getElementById('textSearchToolbar');
        if (textSearchToolbarElement !== null && textSearchToolbarElement.style.display === 'block') {
            textSearchToolbarElement.style.display = 'none';
        }

        const signatureToolbarElement = document.getElementById('SignatureToolbar');
        if (signatureToolbarElement !== null && signatureToolbarElement.style.display === 'block') {
            signatureToolbarElement.style.display = 'none';
        }

        const formFieldToolbarElement = document.getElementById('formFieldToolbar');
        if (formFieldToolbarElement !== null && formFieldToolbarElement.style.display === 'block') {
            formFieldToolbarElement.style.display = 'none';
            pdfViewer.designerMode = false;
        }
        const editAnnotationToolbarElement = document.getElementById('editAnnotationToolbar');
        if (editAnnotationToolbarElement !== null) {
            if (editAnnotationToolbarElement.style.display === 'block') {
                editAnnotationToolbarElement.style.display = 'none';
            } else {
                editAnnotationToolbarElement.style.display = 'block';
            }
        }

    }
    function addEditFormFields() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        const formFieldToolbarElement = document.getElementById('formFieldToolbar');
        if (formFieldToolbarElement !== null) {
            if (formFieldToolbarElement.style.display === 'block') {
                formFieldToolbarElement.style.display = 'none';
                pdfViewer.designerMode = false;
            } else {
                formFieldToolbarElement.style.display = 'block';
                pdfViewer.designerMode = true;
            }
        }

        const editAnnotationToolbarElement = document.getElementById('editAnnotationToolbar');
        if (editAnnotationToolbarElement !== null && editAnnotationToolbarElement.style.display === 'block') {
            editAnnotationToolbarElement.style.display = 'none';
        }

        const textSearchToolbarElement = document.getElementById('textSearchToolbar');
        if (textSearchToolbarElement !== null && textSearchToolbarElement.style.display === 'block') {
            textSearchToolbarElement.style.display = 'none';
        }

        const signatureToolbarElement = document.getElementById('SignatureToolbar');
        if (signatureToolbarElement !== null && signatureToolbarElement.style.display === 'block') {
            signatureToolbarElement.style.display = 'none';
        }
    }

    function highlight() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Highlight');
    }
    function underLine() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Underline');
    }

    function strikeThrough() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Strikethrough');
    }

    function addLine() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Line');
    }

    function addArrow() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Arrow')
    }

    function addRectangle() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Rectangle');
    }

    function addCircle() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Circle');
    }

    function addPoligon() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Polygon');
    }

    function distance() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Distance');
    }

    function perimeter() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Perimeter');
    }

    function area() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Area');
    }

    function radius() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Radius');
    }

    function volume() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('Volume');
    }

    function freeText() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        pdfViewer.annotation.setAnnotationMode('FreeText');
    }
    function addSign() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        const element = document.querySelector('.e-dropdown-popup');
        if (element !== null) {
            if ('formField_signature') {
                const editAnnotationToolbarElement = document.getElementById('editAnnotationToolbar');
                if (editAnnotationToolbarElement !== null && editAnnotationToolbarElement.style.display === 'block') {
                    editAnnotationToolbarElement.style.display = 'none';
                }

                element.style.left = '50%';
                element.style.top = '174px';
            } else {
                element.style.left = '790px';
                element.style.top = '137px';
            }
        }

        const signatureToolbarElement = document.getElementById('SignatureToolbar');
        if (signatureToolbarElement !== null) {
            if (signatureToolbarElement.style.display === 'block') {
                signatureToolbarElement.style.display = 'none';
            } else {
                signatureToolbarElement.style.display = 'block';
            }
        }

        const textSearchToolbarElement = document.getElementById('textSearchToolbar');
        if (textSearchToolbarElement !== null && textSearchToolbarElement.style.display === 'block') {
            textSearchToolbarElement.style.display = 'none';
        }

    }
    function addSign1() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        const element = document.querySelector('.e-dropdown-popup');
        if (element !== null) {
            if ('signature') {
                const editAnnotationToolbarElement = document.getElementById('editAnnotationToolbar');
                if (editAnnotationToolbarElement !== null && editAnnotationToolbarElement.style.display === 'block') {
                    editAnnotationToolbarElement.style.display = 'block';
                }

                element.style.left = '73%';
                element.style.top = '174px';
            } else {
                element.style.left = '790px';
                element.style.top = '137px';
            }
        }

        const signatureToolbarElement = document.getElementById('SignatureToolbar');
        if (signatureToolbarElement !== null) {
            if (signatureToolbarElement.style.display === 'block') {
                signatureToolbarElement.style.display = 'none';
            } else {
                signatureToolbarElement.style.display = 'block';
            }
        }

        const textSearchToolbarElement = document.getElementById('textSearchToolbar');
        if (textSearchToolbarElement !== null && textSearchToolbarElement.style.display === 'block') {
            textSearchToolbarElement.style.display = 'none';
        }

    }
    function findText() {
        disableInkAnnotation();
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (pdfViewer.tool == 'Ink') {
            pdfViewer.annotation.setAnnotationMode('Ink');
        }
        const editAnnotationToolbarElement = document.getElementById('editAnnotationToolbar');
        if (editAnnotationToolbarElement !== null && editAnnotationToolbarElement.style.display === 'block') {
            editAnnotationToolbarElement.style.display = 'none';
        }

        const textSearchToolbarElement = document.getElementById('textSearchToolbar');
        if (textSearchToolbarElement !== null) {
            if (textSearchToolbarElement.style.display === 'block') {
                textSearchToolbarElement.style.display = 'none';
            } else {
                textSearchToolbarElement.style.display = 'block';
            }
        }

        const formFieldToolbarElement = document.getElementById('formFieldToolbar');
        if (formFieldToolbarElement !== null && formFieldToolbarElement.style.display === 'block') {
            formFieldToolbarElement.style.display = 'none';
            pdfViewer.designerMode = false;
        }

        const signatureToolbarElement = document.getElementById('SignatureToolbar');
        if (signatureToolbarElement !== null) {
            if (signatureToolbarElement.style.display === 'block') {
                signatureToolbarElement.style.display = 'none';
            } else {
                signatureToolbarElement.style.display = 'none';
            }
        }
    }
    function searchInputKeypressed(event) {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (event.key === 'Enter') {
            initiateTextSearch();
        }
    }

    var searchText = '';
    var prevMatchCase = false;
    var matchCase = false;

    function initiateTextSearch() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        var textsearchPrevElement = document.getElementById('container_prev_occurrence');
        var textsearchNextElement = document.getElementById('container_next_occurrence');
        var textsearchcloseElement = document.getElementById('container_close_search_box-icon');
        var textsearchElement = document.getElementById('container_search_box-icon');

        if (textsearchPrevElement && textsearchNextElement && textsearchcloseElement && textsearchElement) {
            textsearchPrevElement.disabled = false;
            textsearchNextElement.disabled = false;
            textsearchcloseElement.style.display = 'block';
            textsearchElement.style.display = 'none';

            var currentSearchText = document.getElementById('container_search_input').value;

            if (searchText !== (document.getElementById('container_search_input')).value || prevMatchCase !== matchCase) {
                pdfViewer.textSearchModule.cancelTextSearch();
                searchText = (document.getElementById('container_search_input')).value;
                pdfViewer.textSearchModule.searchText(searchText, matchCase);
                prevMatchCase = matchCase;
            } else {
                nextTextSearch();
            }
        }
    }

    function clearTextSearch() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        const textsearchcloseElement = document.getElementById('container_close_search_box-icon');
        const textsearchElement = document.getElementById('container_search_box-icon');
        textsearchcloseElement.style.display = 'none';
        textsearchElement.style.display = 'block';
        pdfViewer.textSearchModule.cancelTextSearch();
        const searchTextElement = document.getElementById('container_search_input');
        searchTextElement.value = '';
    }

    function previousTextSearch() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.textSearchModule.searchPrevious();
    }

    function nextTextSearch() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.textSearchModule.searchNext();
    }
    function checkBoxChanged(event) {
        const target = event.target;
        if (target.checked) {
            const matchcaseElement = document.getElementById('container_match_case');
            if (matchcaseElement) {
                matchcaseElement.checked = true;
            }
            matchCase = true;
            const checkboxSpanElement = document.getElementById('checkboxSpan');
            if (checkboxSpanElement) {
                checkboxSpanElement.classList.add('e-check');
            }
        } else {
            matchCase = false;
            const checkboxSpanElement = document.getElementById('checkboxSpan');
            if (checkboxSpanElement) {
                checkboxSpanElement.classList.remove('e-check');
            }
        }
    }
    function ink() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if(!isInkEnabled)
          {
            pdfViewer.annotation.setAnnotationMode("Ink");
            isInkEnabled=true;
          }
          else
          {
            pdfViewer.annotation.setAnnotationMode("None");
            isInkEnabled =false;
          }
    }

    function disableInkAnnotation() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        if (isInkEnabled) {
            pdfViewer.annotation.setAnnotationMode("None");
            isInkEnabled = false;
        }
    }

    function textBox() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.formDesignerModule.setFormFieldMode('Textbox');
    }

    function passWord() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.formDesignerModule.setFormFieldMode('Password');
    }

    function checkBox() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.formDesignerModule.setFormFieldMode('CheckBox');
    }

    function radioButton() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.formDesignerModule.setFormFieldMode('RadioButton');
    }

    function dropDown() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.formDesignerModule.setFormFieldMode('DropDown');
    }

    function listBox() {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.formDesignerModule.setFormFieldMode('ListBox');
    }

    function onSignatureClick(event) {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        const editAnnotationToolbarElement = document.getElementById('editAnnotationToolbar');
        if (editAnnotationToolbarElement?.style.display === 'block') {
            if (event) {
                if (event.innerText === 'ADD SIGNATURE') {
                    pdfViewer.annotationModule.setAnnotationMode('HandWrittenSignature');
                } else if (event.innerText === 'ADD INITIAL') {
                    pdfViewer.annotationModule.setAnnotationMode('Initial');
                }
            }
        }

        const formFieldToolbarElement = document.getElementById('formFieldToolbar');
        if (formFieldToolbarElement?.style.display === 'block') {
            if (event) {
                if (event.innerText === 'ADD SIGNATURE') {
                    pdfViewer.formDesignerModule.setFormFieldMode('SignatureField');
                } else if (event.innerText === 'ADD INITIAL') {
                    pdfViewer.formDesignerModule.setFormFieldMode('InitialField');
                }
            }
        }

        const signatureToolbarElement = document.getElementById('SignatureToolbar');
        if (signatureToolbarElement?.style.display === 'block') {
            signatureToolbarElement.style.display = 'none';
        }
    }
</script>
@section Title{
    <title>ASP.NET Core PDF Viewer Custom Toolbar Example - Syncfusion Demos </title>
                }
@section Header{
    <h1 class='sb-sample-text'>Example of Custom Toolbar in ASP.NET Core PDF Viewer Control</h1>
                }